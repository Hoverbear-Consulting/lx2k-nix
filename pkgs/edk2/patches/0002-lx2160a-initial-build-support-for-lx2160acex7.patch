From 6c9f29d86864f635950e94d27472dad18c6ca25f Mon Sep 17 00:00:00 2001
From: Rabeeh Khoury <rabeeh@solid-run.com>
Date: Sun, 28 Jul 2019 14:49:43 +0300
Subject: [PATCH 2/2] lx2160a: initial build support for lx2160acex7

Signed-off-by: Rabeeh Khoury <rabeeh@solid-run.com>
---
 .../LX2160aCex7Pkg/AcpiTables/AcpiTables.inf  |  47 +++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/CPU.asl    |  95 +++++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/Com.asl    |  54 +++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/Dsdt.asl   |  31 ++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/Esdhc.asl  |  76 ++++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/FSPI.asl   |  30 ++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/I2c.asl    | 252 ++++++++++++++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/SPI.asl    |  72 ++++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/Sata.asl   |  86 +++++
 .../LX2160aCex7Pkg/AcpiTables/Dsdt/Usb.asl    | 129 +++++++
 .../NXP/LX2160aCex7Pkg/AcpiTables/Fadt.aslc   | 101 ++++++
 .../NXP/LX2160aCex7Pkg/AcpiTables/Gtdt.aslc   | 193 +++++++++++
 .../NXP/LX2160aCex7Pkg/AcpiTables/Madt.aslc   | 116 +++++++
 .../NXP/LX2160aCex7Pkg/AcpiTables/Mcfg.aslc   |  69 ++++
 .../NXP/LX2160aCex7Pkg/AcpiTables/Platform.h  | 162 +++++++++
 .../NXP/LX2160aCex7Pkg/AcpiTables/Spcr.aslc   |  60 ++++
 .../LX2160aCex7Pkg/DeviceTree/DeviceTree.inf  |  31 ++
 .../NXP/LX2160aCex7Pkg/DeviceTree/Readme.txt  |  26 ++
 .../DeviceTree/fsl-lx2160a-cex7.dts           | 325 ++++++++++++++++++
 .../Include/Library/Dpaa2BoardSpecificLib.h   |  60 ++++
 .../LX2160aCex7Pkg/Include/Library/FpgaLib.h  | 163 +++++++++
 .../Include/Library/PlatformLib.h             |  93 +++++
 .../NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec     |  29 ++
 .../NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dsc     | 217 ++++++++++++
 .../NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.fdf     | 268 +++++++++++++++
 .../Dpaa2BoardSpecificLib.inf                 |  41 +++
 .../Dpaa2BoardSpecificLib/Dpaa2LX2160aCex7.c  | 189 ++++++++++
 .../LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.c  |  77 +++++
 .../Library/FpgaLib/FpgaLib.inf               |  32 ++
 .../Library/PlatformLib/ArmPlatformLib.c      | 105 ++++++
 .../Library/PlatformLib/ArmPlatformLib.inf    |  75 ++++
 .../Library/PlatformLib/NxpQoriqLsHelper.S    |  35 ++
 .../Library/PlatformLib/NxpQoriqLsMem.c       | 155 +++++++++
 Platform/NXP/LX2160aCex7Pkg/VarStore.fdf.inc  |  99 ++++++
 34 files changed, 3593 insertions(+)
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/AcpiTables.inf
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/CPU.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Com.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Dsdt.asl
 create mode 100755 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Esdhc.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/FSPI.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/I2c.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/SPI.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Sata.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Usb.asl
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Fadt.aslc
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Gtdt.aslc
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Madt.aslc
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Mcfg.aslc
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Platform.h
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/AcpiTables/Spcr.aslc
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/DeviceTree/DeviceTree.inf
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/DeviceTree/Readme.txt
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/DeviceTree/fsl-lx2160a-cex7.dts
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Include/Library/Dpaa2BoardSpecificLib.h
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Include/Library/FpgaLib.h
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Include/Library/PlatformLib.h
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dsc
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.fdf
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2BoardSpecificLib.inf
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2LX2160aCex7.c
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.c
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.inf
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.c
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.inf
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsHelper.S
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsMem.c
 create mode 100644 Platform/NXP/LX2160aCex7Pkg/VarStore.fdf.inc

diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/AcpiTables.inf b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/AcpiTables.inf
new file mode 100644
index 0000000..06370d3
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/AcpiTables.inf
@@ -0,0 +1,47 @@
+## @file
+#
+#  ACPI table data and ASL sources required to boot the platform.
+#
+#  Copyright (c) 2014, ARM Ltd. All rights reserved.
+#  Copyright (c) 2015, Linaro Limited. All rights reserved.
+#  Copyright 2017-2018 NXP
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution.  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+#  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+#
+##
+
+[Defines]
+  INF_VERSION                    = 0x0001001A
+  BASE_NAME                      = LX2160AcpiTables
+  FILE_GUID                      = 7E374E25-8E01-4FEE-87F2-390C23C606CD
+  MODULE_TYPE                    = USER_DEFINED
+  VERSION_STRING                 = 1.0
+
+[Sources]
+  Dsdt/Dsdt.asl
+  Fadt.aslc
+  Gtdt.aslc
+  Madt.aslc
+  Mcfg.aslc
+  Spcr.aslc
+ /* Iort.asl
+  Dbg2.aslc
+  SASSSDT.ASL
+  SATASSDT.ASL*/
+
+[Packages]
+  ArmPkg/ArmPkg.dec
+  ArmPlatformPkg/ArmPlatformPkg.dec
+  EmbeddedPkg/EmbeddedPkg.dec
+  MdePkg/MdePkg.dec
+  MdeModulePkg/MdeModulePkg.dec
+  Silicon/NXP/NxpQoriqLs.dec
+ 
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/CPU.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/CPU.asl
new file mode 100644
index 0000000..451aec5
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/CPU.asl
@@ -0,0 +1,95 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+/* acpi object tree
+	/root
+	  | - (_PR)
+		| Processors (CPU 0-7)
+*/
+
+Scope(_SB)
+{
+    //
+    // A72x16 Processor core declaration
+    //
+    Device(CPU0) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 0)
+    }
+    Device(CPU1) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 1)
+    }
+    Device(CPU2) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 2)
+    }
+    Device(CPU3) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 3)
+    }
+    Device(CPU4) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 4)
+    }
+    Device(CPU5) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 5)
+    }
+    Device(CPU6) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 6)
+    }
+    Device(CPU7) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 7)
+    }
+    Device(CPU8) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 8)
+    }
+    Device(CPU9) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 9)
+    }
+    Device(CP10) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 10)
+    }
+    Device(CP11) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 11)
+    }
+    Device(CP12) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 12)
+    }
+    Device(CP13) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 13)
+    }
+    Device(CP14) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 14)
+    }
+    Device(CP15) {
+      Name(_HID, "ACPI0007")
+      Name(_UID, 15)
+    }
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Com.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Com.asl
new file mode 100644
index 0000000..a077f7b
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Com.asl
@@ -0,0 +1,54 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+Scope(_SB)
+{
+  Device(COM0) {
+    Name(_HID, "ARMH0011")
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, UART0_BASE, UART_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { UART0_IT }
+    })
+  }
+  Device(COM1) {
+    Name(_HID, "ARMH0011")
+    Name(_UID, 1)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, UART1_BASE, UART_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { UART1_IT }
+    })
+  }
+  Device(COM2) {
+    Name(_HID, "ARMH0011")
+    Name(_UID, 2)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, UART2_BASE, UART_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { UART2_IT }
+    })
+  }
+  Device(COM3) {
+    Name(_HID, "ARMH0011")
+    Name(_UID, 3)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, UART3_BASE, UART_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { UART3_IT }
+    })
+  }
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Dsdt.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Dsdt.asl
new file mode 100644
index 0000000..626293e
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Dsdt.asl
@@ -0,0 +1,31 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2019 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+#include "Platform.h"
+
+DefinitionBlock("DsdtTable.aml", "DSDT", 1, "NXP  ", "LX2160  ", EFI_ACPI_ARM_OEM_REVISION) {
+  include ("Com.asl")
+  include ("CPU.asl")
+  include ("Esdhc.asl")
+  include ("FSPI.asl")
+  include ("I2c.asl")
+  include ("Sata.asl")
+  include ("SPI.asl")
+  include ("Usb.asl")
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Esdhc.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Esdhc.asl
new file mode 100755
index 0000000..a7021d3
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Esdhc.asl
@@ -0,0 +1,76 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+Scope(_SB)
+{
+  Device(SDC0) {
+    Name(_HID, "NXP0003")
+    Name(_CID, "PNP0D40")
+    Name(_CCA, 0)
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SDC0_BASE, SDC_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive)
+       {
+         SDC0_IT
+       }
+    })
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ},
+         Package () {"little-endian", 1},
+         Package () {"voltage-range", "1800,3300,330"},
+         Package () {"sdhci,auto-cmd12", 1},
+         Package () {"sd-uhs-sdr104", 1},
+         Package () {"sd-uhs-sdr50", 1},
+         Package () {"sd-uhs-sdr25", 1},
+         Package () {"sd-uhs-sdr12", 1},
+	
+      }
+    })
+  }
+
+  Device(SDC1) {
+    Name(_HID, "NXP0003")
+    Name(_CID, "PNP0D40")
+    Name(_CCA, 0)
+    Name(_UID, 1)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SDC1_BASE, SDC_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive)
+       {
+         SDC1_IT
+       }
+    })
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ},
+         Package () {"little-endian", 1},
+         Package () {"voltage-range", "1800,1800,3300,3330"},
+         Package () {"sdhci,auto-cmd12", 1},
+         Package () {"broken-cd", 1},
+         Package () {"bus-width", 8},
+         Package () {"mmc-hs200-1_8v", 1},
+         Package () {"mmc-hs400-1_8v", 1},
+      }
+    })
+  }
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/FSPI.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/FSPI.asl
new file mode 100644
index 0000000..26771cf
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/FSPI.asl
@@ -0,0 +1,30 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+Scope(_SB)
+{
+  Device(FPI0) {
+    Name(_HID, "NXP0009")
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, FSPI0_BASE, FSPI_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) { FSPI_IT }
+    }) // end of _CRS for flex spi device
+  } // end of Flex SPI device
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/I2c.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/I2c.asl
new file mode 100644
index 0000000..91b279e
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/I2c.asl
@@ -0,0 +1,252 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+/*
+  i2c connections on this board and users
+  I2C1
+  Slaves - CPLD, MUX, SEC Flash, SPD
+           SYSFlash, AQR107 Phy, EMC2305 Fan Controller
+           Si52147 PCIe Clock Gen, Si5341B Clock Synthesizer
+           INA220 Power Measurement, LTC3882 regulator
+           SA56004E Thermal Monitor, PCF2129 RTC
+           CS4223 BootFlash,
+           Mux 1, zQSFP+ Cage, SFP+ Cage, PCIe Slot
+
+Most of devices are used for boot, except few to be
+exposed to OS Like
+      EMC2305 Fan Controller
+      INA220 Power Measurement
+      SA56004E Thermal Monitor,
+
+Rest Devices on Mux1 are for debug purpose.
+These could be added in case of *debug only*
+ 
+*/
+
+Scope(_SB)
+{
+  Device(I2C0) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C0_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C0_IT }
+    }) // end of _CRS for i2c0 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+    Device(MUX0) {
+      NAME(_HID, "NXP0002")
+      Name(_CRS, ResourceTemplate()
+      {
+        I2CSerialBus(0x75, ControllerInitiated, 100000, AddressingMode7Bit, "\\_SB.I2C0", 0, ResourceConsumer, ,)
+      }) // end of CRS for mux device
+     Device (CH01) {
+        Name(_ADR, 1)
+        Device(FAN1) {
+        Name (_HID, "PRP0001")
+          Name(_CRS, ResourceTemplate() {
+            I2CSerialBus(0x4D, ControllerInitiated, 100000, AddressingMode7Bit, "\\_SB.I2C0.MUX0.CH01", 0, ResourceConsumer, ,)
+          })
+         Name (_DSD, Package () {
+                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+                Package() {
+                        Package() {"compatible", "smsc,emc2305"},
+                }
+          })
+        } //end of fan device
+      } // end of channel 1 of mux
+/*
+ Need to see, how to add ina2xx
+Currently no matching even for DT 
+     Device (CH02) {
+        Name(_ADR, 2)
+        Device(POW1) {
+        Name (_HID, "PRP0001")
+          Name(_CRS, ResourceTemplate() {
+            I2CSerialBus(0x40, ControllerInitiated, 100000, AddressingMode7Bit, "\\_SB.I2C0.MUX0.CH02", 0, ResourceConsumer, ,)
+          })
+         Name (_DSD, Package () {
+                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+                Package() {
+                        Package() {"compatible", "ina2xx"},
+                }
+          })
+        } //end of fan device
+      } // end of channel 1 of mux
+*/
+/*
+   temp sensor .. no linux driver yet 
+   should we expose as ACPI method for tempature sense. 
+  need to check how ???
+     Device (CH03) {
+        Name(_ADR, 3)
+        Device(THE1) {
+        Name (_HID, "PRP0001")
+          Name(_CRS, ResourceTemplate() {
+            I2CSerialBus(0x4D, ControllerInitiated, 100000, AddressingMode7Bit, "\\_SB.I2C0.MUX0.CH01", 0, ResourceConsumer, ,)
+          })
+         Name (_DSD, Package () {
+                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+                Package() {
+                        Package() {"compatible", "smsc,emc2305"},
+                }
+          })
+        } //end of fan device
+      } // end of channel 1 of mux
+*/
+     Device (CH07) {
+        Name(_ADR, 7)
+        Device(MUX1) {
+        Name (_HID, "NXP0002")
+          Name(_CRS, ResourceTemplate() {
+            I2CSerialBus(0x75, ControllerInitiated, 100000, AddressingMode7Bit, "\\_SB.I2C0.MUX0.CH01", 0, ResourceConsumer, ,)
+          })
+         Name (_DSD, Package () {
+                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+                Package() {
+                        Package() {"compatible", "smsc,emc2305"},
+                }
+          })
+        
+     Device (CH00) {
+        Name(_ADR, 0)
+        Device(CAG1) {
+        Name (_HID, "PRP0001")
+          Name(_CRS, ResourceTemplate() {
+            I2CSerialBus(0x4D, ControllerInitiated, 100000, AddressingMode7Bit, "\\_SB.I2C0.MUX0.CH07.MUX1.CH00", 0, ResourceConsumer, ,)
+          })
+         Name (_DSD, Package () {
+                ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+                Package() {
+                        Package() {"compatible", "cage"},
+                }
+          })
+        } //end of fan device
+      } // end of channel 1 of mux
+        } //end of mux-1 device
+      } // end of channel 7 of mux-0
+      Device(MUX1) {
+      }
+    } // end of Mux 0
+  } // end of i2c device
+
+  Device(I2C1) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 1)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C1_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C1_IT }
+    }) // end of _CRS for i2c1 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+  } // end of i2c device
+
+  Device(I2C2) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 2)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C2_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C2_IT }
+    }) // end of _CRS for i2c2 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+  } // end of i2c device
+
+  Device(I2C3) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 3)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C3_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C3_IT }
+    }) // end of _CRS for i2c3 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+  } // end of i2c device
+
+  Device(I2C4) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 4)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C4_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C4_IT }
+    }) // end of _CRS for i2c4 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+  } // end of i2c device
+
+  Device(I2C5) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C5_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C5_IT }
+    }) // end of _CRS for i2c5 device
+  } // end of i2c device
+
+  Device(I2C6) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 6)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C6_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C6_IT }
+    }) // end of _CRS for i2c6 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+  } // end of i2c device
+
+  Device(I2C7) {
+    Name(_HID, "NXP0001")
+    Name(_UID, 7)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, I2C7_BASE, I2C_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { I2C7_IT }
+    }) // end of _CRS for i2c7 device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ}, //This is device specific data, Need to see how to pass clk stuff
+      }
+    })
+  } // end of i2c device
+
+} // end of i2c controllers
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/SPI.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/SPI.asl
new file mode 100644
index 0000000..17a258f
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/SPI.asl
@@ -0,0 +1,72 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+Scope(_SB)
+{
+  Device(SPI0) {
+    Name(_HID, "NXP0005")
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SPI0_BASE, SPI_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { SPI_IT }
+    }) // end of _CRS for spi device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ},
+         Package () {"spi-num-chipselects", 4},
+         Package () {"bus-num", 0},
+      }
+    }) // end of DSD SPI device
+  } // end of SPI device
+
+  Device(SPI1) {
+    Name(_HID, "NXP0005")
+    Name(_UID, 1)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SPI1_BASE, SPI_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { SPI_IT }
+    }) // end of _CRS for spi device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ},
+         Package () {"spi-num-chipselects", 4},
+         Package () {"bus-num", 0},
+      }
+    }) // end of DSD SPI device
+  } // end of SPI device
+  
+  Device(SPI2) {
+    Name(_HID, "NXP0005")
+    Name(_UID, 2)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SPI2_BASE, SPI_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Shared) { SPI_IT }
+    }) // end of _CRS for spi device
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+         Package () {"clock-frequency", DEFAULT_PLAT_FREQ},
+         Package () {"spi-num-chipselects", 4},
+         Package () {"bus-num", 0},
+      }
+    }) // end of DSD SPI device
+  } // end of SPI device
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Sata.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Sata.asl
new file mode 100644
index 0000000..2a2dd10
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Sata.asl
@@ -0,0 +1,86 @@
+/** @file
+  Differentiated System Description Table Fields (DSDT)
+
+  Copyright (c) 2014, ARM Ltd. All rights reserved.<BR>
+  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+Scope(_SB)
+{
+  Device(SAT0) {
+    Name(_HID, "NXP0004")
+    Name(_CCA, 1)
+    Name(_UID, 0)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SATA0_BASE, SATA_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive)
+       {
+         SATA0_IT_1, SATA0_IT_2, SATA0_IT_3
+       }
+    QwordMemory (
+      ResourceConsumer,
+      PosDecode,         // _DEC
+      MinFixed,          // _MIF
+      MaxFixed,          // _MAF
+      NonCacheable,      // _MEM
+      ReadWrite,         // _RW
+      0,                 // _GRA
+      0x700100520,       // _MIN MinAddress
+      0x700100523,       // _MAX MaxAddress
+      0,                 // _TRA
+      0x4,               // _LEN
+      ,)
+    })
+  }
+
+  Device(SAT1) {
+    Name(_HID, "NXP0004")
+    Name(_CCA, 1)
+    Name(_UID, 1)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SATA1_BASE, SATA_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive)
+       {
+         SATA1_IT_1, SATA1_IT_2, SATA1_IT_3
+       }
+    })
+  }
+
+  Device(SAT2) {
+    Name(_HID, "NXP0004")
+    Name(_CCA, 1)
+    Name(_UID, 2)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SATA2_BASE, SATA_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive)
+       {
+         SATA2_IT_1, SATA2_IT_2, SATA2_IT_3
+       }
+    })
+  }
+
+  Device(SAT3) {
+    Name(_HID, "NXP0004")
+    Name(_CCA, 1)
+    Name(_UID, 3)
+    Name(_CRS, ResourceTemplate() {
+      Memory32Fixed(ReadWrite, SATA3_BASE, SATA_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive)
+       {
+         SATA3_IT_1, SATA3_IT_2, SATA3_IT_3
+       }
+    })
+  }
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Usb.asl b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Usb.asl
new file mode 100644
index 0000000..e75a833
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Dsdt/Usb.asl
@@ -0,0 +1,129 @@
+/** @file
+
+  Dfferentiated System Description Table Fields (DSDT)
+
+  Copyright 2019 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution.  The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+
+**/
+
+Scope(_SB)
+{
+  Device(USB0){
+    Name(_HID, "808622B7")
+    Name(_UID, 1)
+    Name(_CCA, 0) //Controller is not DMA coherent!
+
+    Name(_CRS, ResourceTemplate(){
+      Memory32Fixed(ReadWrite, USB0_BASE, USB_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) {USB0_IT}
+    })
+
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+        Package () {"dr_mode", "host"}, // Mode of controller
+        Package () {"snps,quirk-frame-length-adjustment", 0x20},
+        Package () {"snps,dis_rxdet_inp3_quirk",1},
+      }
+    })
+    //
+    // Root Hub
+    //
+    Device(RHUB){
+      Name(_ADR, 0x00000000)  // Address of Root Hub should be 0
+      //
+      // Ports connected to Root Hub
+      // Port 1 is connectable
+      //
+      Device(PRT1){
+        Name(_ADR, 0x00000001)
+        Name(_UPC, Package(){
+          0xFF,        // Port is connectable
+          0x03,        // Port connector is USB3.0 Type A
+          0x00000000,
+          0x00000000
+        })
+        Name(_PLD, Package(){
+          Buffer(0x10){
+            0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+            0x31, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+          }
+        })
+      } // USB0_RHUB_PRT1
+      Device(PRT2){
+        Name(_ADR, 0x00000002)
+        Name(_UPC, Package(){
+          0x00,        // Port is not connectable
+          0xFF,        // Port connector is A
+          0x00000000,
+          0x00000000
+        })
+      } // USB0_RHUB_PRT2
+    } // USB0_RHUB
+  } // USB0
+
+  Device(USB1){
+    Name(_HID, "808622B7")
+    Name(_UID, 1)
+    Name(_CCA, 0) //Controller is not DMA coherent!
+
+    Name(_CRS, ResourceTemplate(){
+      Memory32Fixed(ReadWrite, USB1_BASE, USB_LEN)
+      Interrupt(ResourceConsumer, Level, ActiveHigh, Exclusive) {USB1_IT}
+    })
+
+    Name (_DSD, Package () {
+      ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
+      Package () {
+        Package () {"dr_mode", "host"}, // Mode of controller
+        Package () {"snps,quirk-frame-length-adjustment", 0x20},
+        Package () {"snps,dis_rxdet_inp3_quirk",1},
+      }
+    })
+    //
+    // Root Hub
+    //
+    Device(RHUB){
+      Name(_ADR, 0x00000000)  // Address of Root Hub should be 0
+      //
+      // Ports connected to Root Hub
+      // Port 1 is connectable
+      //
+      Device(PRT1){
+        Name(_ADR, 0x00000001)
+        Name(_UPC, Package(){
+          0xFF,        // Port is connectable
+          0x06,        // Port connector is Micro USB3.0 Type AB
+          0x00000000,
+          0x00000000
+        })
+        Name(_PLD, Package(){
+          Buffer(0x10){
+            0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+            0x31, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+          }
+        })
+      } // USB1_RHUB_PRT1
+      Device(PRT2){
+        Name(_ADR, 0x00000002)
+        Name(_UPC, Package(){
+          0x00,        // Port is not connectable
+          0xFF,        // Port connector is A
+          0x00000000,
+          0x00000000
+        })
+      } // USB1_RHUB_PRT2
+    } // USB1_RHUB
+  } // USB1
+}
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Fadt.aslc b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Fadt.aslc
new file mode 100644
index 0000000..8d43286
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Fadt.aslc
@@ -0,0 +1,101 @@
+/** @file
+*  Fixed ACPI Description Table (FADT)
+*
+*  Copyright (c) 2012 - 2014, ARM Limited. All rights reserved.
+*  Copyright (c) 2015, Linaro Limited. All rights reserved.
+*  Copyright 2017-2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+*  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+*
+**/
+
+#include "Platform.h"
+
+#include <Library/AcpiLib.h>
+#include <IndustryStandard/Acpi.h>
+
+/*
+* The Fixed ACPI Description Table (FADT) defines various fixed hardware ACPI information
+* vital to an ACPI-compatible OS, such as the base address for the following hardware registers
+* blocks: PM1a_EVT_BLK, PM1b_EVT_BLK, PM1b_CNT_BLK, PM2_CNT_BLK, PM_TMR_BLK, GPE0_BLK.
+* The FADT also has a pointer to the DSDT that contains the Differentiated Definition Block,
+* which in turn provides variable information to an ACPI-compatible OS concerning the base system design.
+* All fields in the FADT that provide hardware addresses provide processor-relative physical addresses.
+**/
+
+EFI_ACPI_6_1_FIXED_ACPI_DESCRIPTION_TABLE Fadt = {
+  ARM_ACPI_HEADER (
+    EFI_ACPI_6_1_FIXED_ACPI_DESCRIPTION_TABLE_SIGNATURE,
+    EFI_ACPI_6_1_FIXED_ACPI_DESCRIPTION_TABLE,
+    EFI_ACPI_6_1_FIXED_ACPI_DESCRIPTION_TABLE_REVISION
+  ),
+  0,                                                                        // UINT32     FirmwareCtrl
+  0,                                                                        // UINT32     Dsdt
+  EFI_ACPI_RESERVED_BYTE,                                                   // UINT8      Reserved0
+  EFI_ACPI_6_1_PM_PROFILE_UNSPECIFIED,                                      // UINT8      PreferredPmProfile
+  0,                                                                        // UINT16     SciInt
+  0,                                                                        // UINT32     SmiCmd
+  0,                                                                        // UINT8      AcpiEnable
+  0,                                                                        // UINT8      AcpiDisable
+  0,                                                                        // UINT8      S4BiosReq
+  0,                                                                        // UINT8      PstateCnt
+  0,                                                                        // UINT32     Pm1aEvtBlk
+  0,                                                                        // UINT32     Pm1bEvtBlk
+  0,                                                                        // UINT32     Pm1aCntBlk
+  0,                                                                        // UINT32     Pm1bCntBlk
+  0,                                                                        // UINT32     Pm2CntBlk
+  0,                                                                        // UINT32     PmTmrBlk
+  0,                                                                        // UINT32     Gpe0Blk
+  0,                                                                        // UINT32     Gpe1Blk
+  0,                                                                        // UINT8      Pm1EvtLen
+  0,                                                                        // UINT8      Pm1CntLen
+  0,                                                                        // UINT8      Pm2CntLen
+  0,                                                                        // UINT8      PmTmrLen
+  0,                                                                        // UINT8      Gpe0BlkLen
+  0,                                                                        // UINT8      Gpe1BlkLen
+  0,                                                                        // UINT8      Gpe1Base
+  0,                                                                        // UINT8      CstCnt
+  0,                                                                        // UINT16     PLvl2Lat
+  0,                                                                        // UINT16     PLvl3Lat
+  0,                                                                        // UINT16     FlushSize
+  0,                                                                        // UINT16     FlushStride
+  0,                                                                        // UINT8      DutyOffset
+  0,                                                                        // UINT8      DutyWidth
+  0,                                                                        // UINT8      DayAlrm
+  0,                                                                        // UINT8      MonAlrm
+  0,                                                                        // UINT8      Century
+  0,                                                                        // UINT16     IaPcBootArch
+  0,                                                                        // UINT8      Reserved1
+  EFI_ACPI_6_1_HW_REDUCED_ACPI,                                             // UINT32     Flags
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  ResetReg
+  0,                                                                        // UINT8      ResetValue
+  EFI_ACPI_6_1_ARM_PSCI_COMPLIANT,                                          // UINT16     ArmBootArchFlags
+  EFI_ACPI_6_1_FIXED_ACPI_DESCRIPTION_TABLE_MINOR_REVISION,                 // UINT8      MinorRevision
+  0,                                                                        // UINT64     XFirmwareCtrl
+  0,                                                                        // UINT64     XDsdt
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XPm1aEvtBlk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XPm1bEvtBlk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XPm1aCntBlk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XPm1bCntBlk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XPm2CntBlk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XPmTmrBlk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XGpe0Blk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  XGpe1Blk
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  SleepControlReg
+  NULL_GAS,                                                                 // EFI_ACPI_6_1_GENERIC_ADDRESS_STRUCTURE  SleepStatusReg
+  0,                                                                        // UINT64     Hypervisor Vendor Identify
+};
+
+//
+// Reference the table being generated to prevent the optimizer from removing the
+// data structure from the executable
+//
+VOID* CONST ReferenceAcpiTable = &Fadt;
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Gtdt.aslc b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Gtdt.aslc
new file mode 100644
index 0000000..4b9f7d2
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Gtdt.aslc
@@ -0,0 +1,193 @@
+/**  Generic Timer Description Table (GTDT)
+*
+*  Copyright (c) 2012 - 2014, ARM Limited. All rights reserved.
+*  Copyright (c) 2015, Linaro Limited. All rights reserved.
+*  Copyright 2017-2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+*  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+*
+**/
+
+#include "Platform.h"
+
+#include <Library/AcpiLib.h>
+#include <Library/PcdLib.h>
+#include <IndustryStandard/Acpi.h>
+
+/*
+ * GTDT_GTIMER_FLAGS
+ * IT trigger (Level/Edge- Bit 0) and Polarity (Low/High) Bit 1
+ * Set bit-0 is 0 (Level trigger), Bit 1 1 (Active low)
+ */
+#define GTDT_GTIMER_FLAGS           (EFI_ACPI_6_1_GTDT_TIMER_FLAG_TIMER_INTERRUPT_POLARITY)
+
+/*
+ * Total GT Block Structure
+ *  TIMER_BLOCK_COUNT and TIMER_WATCHDOG_COUNT
+ */
+#define PLATFORM_TIMER_COUNT        (TIMER_BLOCK_COUNT + TIMER_WATCHDOG_COUNT)
+
+/*
+ * Timer Frame IT High Level triggered
+ * IT trigger (Level/Edge- Bit 0) and Polarity (Low/High) Bit 1
+ * Set  bit-0 is 0 (Level trigger), Bit 1 0 (Active High)
+ */
+#define GTDT_FRAME_FLAGS 0
+
+/*
+ * Timer frame status
+ * Access - Secure or non secure <-- Bit 0
+ * State - Save (meaning always on) or Lose Context  <-- Bit 1
+ * Set Bit 0 1 as Secure and Bit 1 zero as lose context
+*/
+#define GTDT_FRAME_COMMON_FLAGS EFI_ACPI_6_1_GTDT_GT_BLOCK_COMMON_FLAG_SECURE_TIMER
+
+/*
+ * Watchdog flags
+ * IT trigger (Level/Edge- Bit 0), Polarity (Low/High) Bit 1, Secured Bit 2
+ * Set Level trigger (Bit 0 as 0)
+ * Active High (Bit 1 as 0)
+ * Non secure (Bit 2 as 0)
+ */
+#define SBSA_WATCHDOG_FLAGS 0
+#define SBSA_SEC_WATCHDOG_FLAGS EFI_ACPI_6_1_GTDT_GT_BLOCK_COMMON_FLAG_SECURE_TIMER
+
+#define GT_BLOCK_FRAME_RES_BASE  MAX_UINT64
+#pragma pack (1)
+
+typedef struct {
+  EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLE          Gt;
+  EFI_ACPI_6_1_GTDT_GT_BLOCK_STRUCTURE                  GtBlock;
+  EFI_ACPI_6_1_GTDT_GT_BLOCK_TIMER_STRUCTURE            Frames[TIMER_FRAME_COUNT];
+  EFI_ACPI_6_1_GTDT_SBSA_GENERIC_WATCHDOG_STRUCTURE     Watchdogs[TIMER_WATCHDOG_COUNT];
+} EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLES;
+
+#pragma pack ()
+
+EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLES Gtdt = {
+  {
+    ARM_ACPI_HEADER(
+      EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLE_SIGNATURE,
+      EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLES,
+      EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLE_REVISION
+    ),
+    TIMER_BASE_ADDRESS,                                     // UINT64  PhysicalAddress
+    EFI_ACPI_RESERVED_DWORD,                                // UINT32  Reserved
+    TIMER_SEC_IT,                                           // UINT32  SecurePL1TimerGSIV
+    GTDT_GTIMER_FLAGS,                                      // UINT32  SecurePL1TimerFlags
+    TIMER_NON_SEC_IT,                                       // UINT32  NonSecurePL1TimerGSIV
+    GTDT_GTIMER_FLAGS,                                      // UINT32  NonSecurePL1TimerFlags
+    TIMER_VIRT_IT,                                          // UINT32  VirtualTimerGSIV
+    GTDT_GTIMER_FLAGS,                                      // UINT32  VirtualTimerFlags
+    TIMER_HYP_IT,                                           // UINT32  NonSecurePL2TimerGSIV
+    GTDT_GTIMER_FLAGS,                                      // UINT32  NonSecurePL2TimerFlags
+    TIMER_READ_BASE_ADDRESS,                                // UINT64  CntReadBasePhysicalAddress
+    PLATFORM_TIMER_COUNT,	 	                    // UINT32  PlatformTimerCount
+    sizeof (EFI_ACPI_6_1_GENERIC_TIMER_DESCRIPTION_TABLE)   // UINT32  PlatfromTimerOffset
+  }, // end of Gtdt.Gt
+
+  {
+    EFI_ACPI_6_1_GTDT_GT_BLOCK,                                                  // UINT8 Type
+    sizeof (EFI_ACPI_6_1_GTDT_GT_BLOCK_STRUCTURE)                                // UINT16 Length
+      + sizeof (EFI_ACPI_6_1_GTDT_GT_BLOCK_TIMER_STRUCTURE) * TIMER_FRAME_COUNT ,
+    EFI_ACPI_RESERVED_BYTE,                                                      // UINT8 Reserved
+    TIMER_GT_BLOCK_0_ADDRESS,                                                    // UINT64 CntCtlBase
+    TIMER_FRAME_COUNT,                                                           // UINT32 GTBlockTimerCount
+    sizeof (EFI_ACPI_6_1_GTDT_GT_BLOCK_STRUCTURE)            // UINT32 GTBlockTimerOffset
+  }, // end of Gtdt.GtBlock
+  {
+    {
+      0,                                    // UINT8 GTFrameNumber
+      {EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE},            // UINT8 Reserved[3]
+      TIMER_GT_BASE_0_ADDRESS,              // UINT64 CntBaseX
+      TIMER_GT_BASE_0_EL0_ADDRESS,          // UINT64 CntEL0BaseX
+      TIMER_FRAME0_IT,                      // UINT32 GTxPhysicalTimerGSIV
+      GTDT_FRAME_FLAGS,                     // UINT32 GTxPhysicalTimerFlags
+      0,                                    // UINT32 GTxVirtualTimerGSIV
+      0,                                    // UINT32 GTxVirtualTimerFlags
+      GTDT_FRAME_COMMON_FLAGS               // UINT32 GTxCommonFlags
+    }, //Gtdt.Frames[0]
+
+    {
+      1,                                    // UINT8 GTFrameNumber
+      {EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE},            // UINT8 Reserved[3]
+      TIMER_GT_BASE_1_ADDRESS,              // UINT64 CntBaseX
+      GT_BLOCK_FRAME_RES_BASE,              // UINT64 CntEL0BaseX
+      TIMER_FRAME1_IT,                      // UINT32 GTxPhysicalTimerGSIV
+      GTDT_FRAME_FLAGS,                     // UINT32 GTxPhysicalTimerFlags
+      0,                                    // UINT32 GTxVirtualTimerGSIV
+      0,                                    // UINT32 GTxVirtualTimerFlags
+      GTDT_FRAME_COMMON_FLAGS               // UINT32 GTxCommonFlags
+    }, //Gtdt.Frames[1]
+
+    {
+      2,                                     // UINT8 GTFrameNumber
+      {EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE},             // UINT8 Reserved[3]
+      TIMER_GT_BASE_2_ADDRESS,               // UINT64 CntBaseX
+      TIMER_GT_BASE_2_EL0_ADDRESS,           // UINT64 CntEL0BaseX
+      TIMER_FRAME2_IT,                       // UINT32 GTxPhysicalTimerGSIV
+      GTDT_FRAME_FLAGS,                      // UINT32 GTxPhysicalTimerFlags
+      0,                                     // UINT32 GTxVirtualTimerGSIV
+      0,                                     // UINT32 GTxVirtualTimerFlags
+      GTDT_FRAME_COMMON_FLAGS                // UINT32 GTxCommonFlags
+    },//Gtdt.Frames[2]
+
+    {
+      3,                                     // UINT8 GTFrameNumber
+      {EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE,
+        EFI_ACPI_RESERVED_BYTE},             // UINT8 Reserved[3]
+      TIMER_GT_BASE_3_ADDRESS,               // UINT64 CntBaseX
+      GT_BLOCK_FRAME_RES_BASE,               // UINT64 CntEL0BaseX
+      TIMER_FRAME3_IT,                       // UINT32 GTxPhysicalTimerGSIV
+      GTDT_FRAME_FLAGS,                      // UINT32 GTxPhysicalTimerFlags
+      0,                                     // UINT32 GTxVirtualTimerGSIV
+      0,                                     // UINT32 GTxVirtualTimerFlags
+      GTDT_FRAME_COMMON_FLAGS                // UINT32 GTxCommonFlags
+    } //Gtdt.Frames[3]
+  }, // End of frames and timer blocks
+
+
+  // watchdogs 
+  {
+    {
+      EFI_ACPI_6_1_GTDT_SBSA_GENERIC_WATCHDOG,                   // UINT8 Type
+      sizeof (EFI_ACPI_6_1_GTDT_SBSA_GENERIC_WATCHDOG_STRUCTURE),// UINT16 Length
+      EFI_ACPI_RESERVED_BYTE,                                    // UINT8 Reserved
+      TIMER_WDT0_REFRESH_BASE,                                   // UINT64 RefreshFramePhysicalAddress
+      TIMER_WDT0_CONTROL_BASE,                                   // UINT64 WatchdogControlFramePhysicalAddress
+      TIMER_WDT0_IT,                                             // UINT32 WatchdogTimerGSIV
+      SBSA_WATCHDOG_FLAGS                                        // UINT32 WatchdogTimerFlags
+    }, // Gtdt.Watchdogs[0]
+
+    {
+      EFI_ACPI_6_1_GTDT_SBSA_GENERIC_WATCHDOG,                    // UINT8 Type
+      sizeof (EFI_ACPI_6_1_GTDT_SBSA_GENERIC_WATCHDOG_STRUCTURE), // UINT16 Length
+      EFI_ACPI_RESERVED_BYTE,                                     // UINT8 Reserved
+      TIMER_WDT1_REFRESH_BASE,                                    // UINT64 RefreshFramePhysicalAddress
+      TIMER_WDT1_CONTROL_BASE,                                    // UINT64 WatchdogControlFramePhysicalAddress
+      TIMER_WDT1_IT,                                              // UINT32 WatchdogTimerGSIV
+      SBSA_SEC_WATCHDOG_FLAGS                                     // UINT32 WatchdogTimerFlags
+    } //Gtdt.Watchdogs[1]
+  }
+};
+
+//
+// Reference the table being generated to prevent the optimizer from removing the
+// data structure from the executable
+//
+VOID* CONST ReferenceAcpiTable = &Gtdt;
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Madt.aslc b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Madt.aslc
new file mode 100644
index 0000000..4cd3397
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Madt.aslc
@@ -0,0 +1,116 @@
+/** @file
+*  Multiple APIC Description Table (MADT)
+*
+*  Copyright (c) 2012 - 2014, ARM Limited. All rights reserved.
+*  Copyright (c) 2015, Linaro Limited. All rights reserved.<BR>
+*  Copyright 2017-2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+*  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+*
+**/
+
+#include "Platform.h"
+
+#include <Library/AcpiLib.h>
+#include <Library/ArmLib.h>
+#include <Library/PcdLib.h>
+#include <IndustryStandard/Acpi.h>
+#include <IndustryStandard/Acpi61.h>
+
+//
+// Multiple APIC Description Table
+//
+#pragma pack (1)
+
+typedef struct {
+  EFI_ACPI_6_1_MULTIPLE_APIC_DESCRIPTION_TABLE_HEADER   Header;
+  EFI_ACPI_6_1_GIC_STRUCTURE                            GicInterfaces[16];
+  EFI_ACPI_6_1_GIC_DISTRIBUTOR_STRUCTURE                GicDistributor;
+  EFI_ACPI_6_1_GICR_STRUCTURE				Gicr;
+  EFI_ACPI_6_1_GIC_ITS_STRUCTURE			GicITS;
+} EFI_ACPI_6_1_MULTIPLE_APIC_DESCRIPTION_TABLE;
+
+#pragma pack ()
+
+EFI_ACPI_6_1_MULTIPLE_APIC_DESCRIPTION_TABLE Madt = {
+  {
+    ARM_ACPI_HEADER (
+      EFI_ACPI_6_1_MULTIPLE_APIC_DESCRIPTION_TABLE_SIGNATURE,
+      EFI_ACPI_6_1_MULTIPLE_APIC_DESCRIPTION_TABLE,
+      EFI_ACPI_6_1_MULTIPLE_APIC_DESCRIPTION_TABLE_REVISION
+    ),
+    //
+    // MADT specific fields
+    //
+    0, // LocalApicAddress
+    0, // Flags
+  },
+  {
+   // Format: EFI_ACPI_6_1_GICC_STRUCTURE_INIT(GicId, AcpiCpuUid, Mpidr, Flags, PmuIrq, GicBase,
+	// GicVBase, GicHBase, GsivId, GicRBase, Efficiency)
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(0, 0, GET_MPID(0, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(1, 1, GET_MPID(0, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(2, 2, GET_MPID(1, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(3, 3, GET_MPID(1, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(4, 4, GET_MPID(2, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(5, 5, GET_MPID(2, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(6, 6, GET_MPID(3, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(7, 7, GET_MPID(3, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(8, 8, GET_MPID(4, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(9, 9, GET_MPID(4, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(10, 10, GET_MPID(5, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(11, 11, GET_MPID(5, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(12, 12, GET_MPID(6, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(13, 13, GET_MPID(6, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(14, 14, GET_MPID(7, 0),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+	EFI_ACPI_6_0_GICC_STRUCTURE_INIT(15, 15, GET_MPID(7, 1),EFI_ACPI_6_0_GIC_ENABLED, 23, GICC_BASE,
+						GICV_BASE, GICH_BASE, 0x19, 0, 0),
+  },
+  EFI_ACPI_6_0_GIC_DISTRIBUTOR_INIT(0, GICD_BASE, 0, GIC_VERSION),
+  /* GIC Redistributor */
+  {
+    EFI_ACPI_6_1_GICR,                         // UINT8 Type
+    sizeof(EFI_ACPI_6_1_GICR_STRUCTURE),       // UINT8 Length
+    EFI_ACPI_RESERVED_WORD,                    // UINT16 Reserved
+    GICR_BASE,  // UINT64 DiscoveryRangeBaseAddress
+    GICR_LEN,                                // UINT32 DiscoveryRangeLength
+  },
+  /* GIC ITS */
+  {
+    EFI_ACPI_6_1_GIC_ITS,
+    sizeof(EFI_ACPI_6_1_GIC_ITS_STRUCTURE),
+    EFI_ACPI_RESERVED_WORD,
+    0,
+    GICI_BASE,
+    EFI_ACPI_RESERVED_DWORD,
+  }
+};
+
+//
+// Reference the table being generated to prevent the optimizer from removing the
+// data structure from the executable
+//
+VOID* CONST ReferenceAcpiTable = &Madt;
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Mcfg.aslc b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Mcfg.aslc
new file mode 100644
index 0000000..861b27a
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Mcfg.aslc
@@ -0,0 +1,69 @@
+/*
+ * Copyright 2017-2018 NXP
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the BSD License which accompanies
+ * this distribution, and is available at
+ * http://opensource.org/licenses/bsd-license.php
+ *
+ */
+
+#include <IndustryStandard/Acpi.h>
+#include "Platform.h"
+
+#define MCFG_VERSION  0x1
+
+#pragma pack(1)
+
+typedef struct {
+   UINT64 BaseAddress; // Base Address
+   UINT16 SegGroupNum; // Segment Group Number
+   UINT8  StartBusNum; // Start Bus Number
+   UINT8  EndBusNum;  // End Bus Number
+   UINT32 Reserved2;
+} EFI_MCFG_CONFIG_STRUCTURE;
+
+typedef struct {
+   EFI_ACPI_DESCRIPTION_HEADER Header;
+   UINT64 Reserved1;
+} EFI_MCFG_TABLE_CONFIG;
+
+typedef struct {
+   EFI_MCFG_TABLE_CONFIG Acpi_Table_Mcfg;
+   EFI_MCFG_CONFIG_STRUCTURE Config_Structure[1];
+} EFI_PCI_EXPRESS_MEMORY_MAPPED_CONFIGURATION_SPACE_TABLE;
+
+#pragma pack()
+
+EFI_PCI_EXPRESS_MEMORY_MAPPED_CONFIGURATION_SPACE_TABLE Mcfg= {
+  {
+      {
+        EFI_ACPI_6_1_PCI_EXPRESS_MEMORY_MAPPED_CONFIGURATION_SPACE_BASE_ADDRESS_DESCRIPTION_TABLE_SIGNATURE,
+        sizeof (EFI_PCI_EXPRESS_MEMORY_MAPPED_CONFIGURATION_SPACE_TABLE),
+        MCFG_VERSION,
+        0x00,                                                     // Checksum will be updated at runtime
+        {EFI_ACPI_ARM_OEM_ID},
+        EFI_ACPI_ARM_OEM_TABLE_ID,
+        EFI_ACPI_ARM_OEM_REVISION,
+        EFI_ACPI_ARM_CREATOR_ID,
+        EFI_ACPI_ARM_CREATOR_REVISION
+      },
+      0x0000000000000000,                                 //Reserved
+  },
+  {
+    //1p NA PCIe2
+    {
+      0xa0000000,                                         //Base Address
+      0x2,                                                //Segment Group Number
+      0x80,                                               //Start Bus Number
+      0x87,                                               //End Bus Number
+      0x00000000,                                         //Reserved
+    },
+   },
+};
+
+//
+// Reference the table being generated to prevent the optimizer from removing the
+// data structure from the executable
+//
+VOID* CONST ReferenceAcpiTable = &Mcfg;
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Platform.h b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Platform.h
new file mode 100644
index 0000000..6838549
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Platform.h
@@ -0,0 +1,162 @@
+/** @file
+*
+*  Copyright (c) 2011-2015, ARM Limited. All rights reserved.
+*  Copyright (c) 2015, Linaro Limited. All rights reserved.
+*  Copyright 2017-2018 NXP
+*  Copyright 2019 SolidRun ltd.
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+*  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+*
+**/
+
+
+#ifndef _LX2160ACEX7_PLATFORM_H_
+#define _LX2160ACEX7_PLATFORM_H_
+
+//
+// ACPI table information used to initialize tables.
+//
+#define EFI_ACPI_ARM_OEM_ID             'N','X','P',' ',' ',' '   // OEMID
+#define EFI_ACPI_ARM_OEM_TABLE_ID       SIGNATURE_64('L','X','2','1','6','0',' ',' ') // OEM table id, putting SOC name here
+#define EFI_ACPI_ARM_OEM_REVISION       0x00000000
+#define EFI_ACPI_ARM_CREATOR_ID         SIGNATURE_32('I','N','T','L')
+#define EFI_ACPI_ARM_CREATOR_REVISION   0x20151124
+
+// A macro to initialise the common header part of EFI ACPI tables as defined by
+// EFI_ACPI_DESCRIPTION_HEADER structure.
+#define ARM_ACPI_HEADER(Signature, Type, Revision) {              \
+    Signature,                      /* UINT32  Signature */       \
+    sizeof (Type),                  /* UINT32  Length */          \
+    Revision,                       /* UINT8   Revision */        \
+    0,                              /* UINT8   Checksum */        \
+    { EFI_ACPI_ARM_OEM_ID },        /* UINT8   OemId[6] */        \
+    EFI_ACPI_ARM_OEM_TABLE_ID,      /* UINT64  OemTableId */      \
+    EFI_ACPI_ARM_OEM_REVISION,      /* UINT32  OemRevision */     \
+    EFI_ACPI_ARM_CREATOR_ID,        /* UINT32  CreatorId */       \
+    EFI_ACPI_ARM_CREATOR_REVISION   /* UINT32  CreatorRevision */ \
+  }
+
+// Gic
+#define GIC_VERSION 3
+#define GICD_BASE   0x6000000
+#define GICI_BASE   0x6020000
+#define GICR_BASE   0x06200000
+#define GICR_LEN    0x200000
+#define GICC_BASE   0x0c0c0000
+#define GICH_BASE   0x0c0d0000
+#define GICV_BASE   0x0c0e0000
+
+// UART
+#define UART0_BASE               0x21C0000
+#define UART1_BASE               0x21D0000
+#define UART2_BASE               0x21E0000
+#define UART3_BASE               0x21F0000
+#define UART0_IT                 64
+#define UART1_IT                 65
+#define UART2_IT                 104
+#define UART3_IT                 105
+#define UART_LEN                 0x10000
+#define SPCR_FLOW_CONTROL_NONE   0
+
+// I2C 
+#define I2C0_BASE 0x2000000
+#define I2C1_BASE 0x2010000
+#define I2C2_BASE 0x2020000
+#define I2C3_BASE 0x2030000
+#define I2C4_BASE 0x2040000
+#define I2C5_BASE 0x2050000
+#define I2C6_BASE 0x2060000
+#define I2C7_BASE 0x2070000
+#define I2C_LEN   0x10000
+#define I2C0_IT   66 
+#define I2C1_IT   66
+#define I2C2_IT   67
+#define I2C3_IT   67
+#define I2C4_IT   106
+#define I2C5_IT   106
+#define I2C6_IT   107
+#define I2C7_IT   107
+
+// Sata
+#define SATA0_BASE 0x3200000
+#define SATA1_BASE 0x3210000
+#define SATA2_BASE 0x3220000
+#define SATA3_BASE 0x3230000
+#define SATA_LEN   0x10000
+#define SATA0_IT_1 165
+#define SATA0_IT_2 166
+#define SATA0_IT_3 167
+#define SATA1_IT_1 168
+#define SATA1_IT_2 169
+#define SATA1_IT_3 170
+#define SATA2_IT_1 129
+#define SATA2_IT_2 130
+#define SATA2_IT_3 131
+#define SATA3_IT_1 132
+#define SATA3_IT_2 133
+#define SATA3_IT_3 134
+
+//USB
+#define USB0_BASE 0x3100000
+#define USB1_BASE 0x3110000
+#define USB_LEN   0x10000
+#define USB0_IT   112
+#define USB1_IT   113
+
+// DSPI
+#define SPI0_BASE 0x2100000
+#define SPI1_BASE 0x2110000
+#define SPI2_BASE 0x2120000
+#define SPI_LEN   0x10000
+#define SPI_IT    58
+
+//Flex SPI
+#define FSPI0_BASE 0x20c0000
+#define FSPI_LEN   0x10000
+#define FSPI_IT    57
+
+// SD
+#define SDC0_BASE 0x2140000
+#define SDC1_BASE 0x2150000
+#define SDC_LEN   0x10000
+#define SDC0_IT   60
+#define SDC1_IT   95
+
+// Timer
+#define TIMER_BLOCK_COUNT            1
+#define TIMER_FRAME_COUNT            4
+#define TIMER_WATCHDOG_COUNT         2
+#define TIMER_BASE_ADDRESS           0x23E0000 // a.k.a CNTControlBase
+#define TIMER_READ_BASE_ADDRESS      0x23F0000 // a.k.a CNTReadBase
+#define TIMER_GT_BLOCK_0_ADDRESS     0x2890000 // a.k.a CNTCTLBase (Secure)
+#define TIMER_GT_BASE_0_ADDRESS      0x28A0000  // a.k.a CNTBase0
+#define TIMER_GT_BASE_1_ADDRESS      0x28B0000  // a.k.a CNTBase1
+#define TIMER_GT_BASE_2_ADDRESS      0x28C0000  // a.k.a CNTBase2
+#define TIMER_GT_BASE_3_ADDRESS      0x28D0000  // a.k.a CNTBase3
+#define TIMER_GT_BASE_0_EL0_ADDRESS  0x28E0000  // a.k.a CNTBase0EL0
+#define TIMER_GT_BASE_2_EL0_ADDRESS  0x28F0000  // a.k.a CNTBase2EL0
+#define TIMER_WDT0_REFRESH_BASE      0x2390000
+#define TIMER_WDT0_CONTROL_BASE      0x23A0000
+#define TIMER_WDT1_REFRESH_BASE      0x23B0000
+#define TIMER_WDT1_CONTROL_BASE      0x23C0000
+#define TIMER_SEC_IT                 29
+#define TIMER_NON_SEC_IT             30
+#define TIMER_VIRT_IT                27
+#define TIMER_HYP_IT                 26
+#define TIMER_FRAME0_IT              78
+#define TIMER_FRAME1_IT              79
+#define TIMER_FRAME2_IT              92
+#define TIMER_FRAME3_IT              93
+#define TIMER_WDT0_IT                91
+#define TIMER_WDT1_IT                108
+
+#define DEFAULT_PLAT_FREQ            700000000
+#endif
diff --git a/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Spcr.aslc b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Spcr.aslc
new file mode 100644
index 0000000..07077eb
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/AcpiTables/Spcr.aslc
@@ -0,0 +1,60 @@
+/** Serial Port Console Redirection Table (SPCR)
+*
+*  Copyright (c) 2016 Linaro Limited. All rights reserved.
+*  Copyright 2017-2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+*  Based on the files under ArmPlatformPkg/ArmJunoPkg/AcpiTables/
+*
+**/
+
+#include <Library/AcpiLib.h>
+#include <Library/PcdLib.h>
+#include <IndustryStandard/Acpi.h>
+#include <IndustryStandard/SerialPortConsoleRedirectionTable.h>
+#include "Platform.h"
+
+
+STATIC EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE Spcr = {
+  ARM_ACPI_HEADER (EFI_ACPI_5_1_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_SIGNATURE,
+                     EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE,
+                     EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_REVISION),
+  EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_INTERFACE_TYPE_ARM_PL011_UART, //InterfaceType
+  // UINT8                                   Reserved1[3];
+  {
+    EFI_ACPI_RESERVED_BYTE,
+    EFI_ACPI_RESERVED_BYTE,
+    EFI_ACPI_RESERVED_BYTE
+  },                                                                   //Reserved1
+  ARM_GAS32 (UART0_BASE),                                              //BaseAddress
+  EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_INTERRUPT_TYPE_GIC,   //InterruptType
+  0,                                                                   // irq Not used on ARM
+  UART0_IT,                                                            //GlobalSystemInterrupt
+  EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_BAUD_RATE_115200,     //BaudRate
+  EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_PARITY_NO_PARITY,     //Parity
+  EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_STOP_BITS_1,          //StopBits
+  SPCR_FLOW_CONTROL_NONE,                                              //FlowControl
+  EFI_ACPI_SERIAL_PORT_CONSOLE_REDIRECTION_TABLE_TERMINAL_TYPE_ANSI,   //TerminalType
+  EFI_ACPI_RESERVED_BYTE,                                              //Reserved2
+  0xFFFF,                                                              //PciDeviceId
+  0xFFFF,                                                              //PciVendorId
+  0x00,                                                                //PciBusNumber
+  0x00,                                                                //PciDeviceNumber
+  0x00,                                                                //PciFunctionNumber
+  0x00000000,                                                          //PciFlags
+  0x00,                                                                //PciSegment
+  EFI_ACPI_RESERVED_DWORD                                              //Reserved3
+};
+
+//
+// Reference the table being generated to prevent the optimizer from removing the
+// data structure from the executable
+//
+VOID* CONST ReferenceAcpiTable = &Spcr;
diff --git a/Platform/NXP/LX2160aCex7Pkg/DeviceTree/DeviceTree.inf b/Platform/NXP/LX2160aCex7Pkg/DeviceTree/DeviceTree.inf
new file mode 100644
index 0000000..0eccc3a
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/DeviceTree/DeviceTree.inf
@@ -0,0 +1,31 @@
+#/** @file
+#
+#  Copyright 2019 SolidRun ltd.
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution.  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+#**/
+
+[Defines]
+  INF_VERSION    = 0x0001001A
+  BASE_NAME      = LX2160aCEX7DeviceTree
+  FILE_GUID      = 25462CDA-221F-47DF-AC1D-259CFAA4E326 # gDtPlatformDefaultDtbFileGuid
+  MODULE_TYPE    = USER_DEFINED
+  VERSION_STRING = 1.0
+
+[Sources]
+  # The order of these file is important
+  # the fist file is main platform dtb file which is loaded by DtDxe driver
+  # the order of the rest of the files in determined by their parsing in SocFixupLib
+  fsl-lx2160a-cex7.dts
+
+[Packages]
+  MdePkg/MdePkg.dec
+  Silicon/NXP/NxpQoriqLs.dec
+  Silicon/NXP/LX2160A/LX2160A.dec
diff --git a/Platform/NXP/LX2160aCex7Pkg/DeviceTree/Readme.txt b/Platform/NXP/LX2160aCex7Pkg/DeviceTree/Readme.txt
new file mode 100644
index 0000000..4c47fb1
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/DeviceTree/Readme.txt
@@ -0,0 +1,26 @@
+These dts/dtsi files have been copied from https://bitbucket.sw.nxp.com/projects/DNNPI/repos/lx2-linux/browse/arch/arm64/boot/dts/freescale
+
+branch : lx2-devel
+Linux Version : 4.9.62
+
+Following changes have been done in these files
+1. Tab has been converted to two spaces.
+2. The file end of line has been changed to Windows
+3. #include <dt-bindings/interrupt-controller/arm-gic.h> and #include <dt-bindings/thermal/thermal.h>
+   these header files have been removed and the values of macros defined in these files has been used directly
+4. The include files' location has been changed.
+   The common dts/dtsi files are in Silicon/NXP/Include/DeviceTreeInclude/
+   SOC specific dts/dtsi files are in Silicon/NXP/<SOC>/Include/DeviceTreeInclude/
+   Platform specific dts/dtsi files are in Platform/NXP/<Platform>/DeviceTree/
+
+   where <SOC> can be LS1043A, LS1046A, LS2088A etc
+   and <Platform> can be LS1043aRdbPkg, LS1046aRdbPkg, LS2088aRdbPkg etc
+
+   Their path in dts/dtsi files have been fixed accordingly
+5. The enable-method = "psci" has been added to all cpu nodes. no fixups are done by UEFI regarding this
+6. The psci node has been added. no fixups are done by UEFI regarding this
+7. Job ring 3 has been deleted from crypto node
+11. The devices that are controlled by serdes protocol like mac devices and pcie and sata device have been
+    disabled using status = "disabled"; property in main SOC dtsi file and have been enabled in board dts
+    file.
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/DeviceTree/fsl-lx2160a-cex7.dts b/Platform/NXP/LX2160aCex7Pkg/DeviceTree/fsl-lx2160a-cex7.dts
new file mode 100644
index 0000000..0be8b1b
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/DeviceTree/fsl-lx2160a-cex7.dts
@@ -0,0 +1,325 @@
+/*
+ * Device Tree file for LX2160ACEX7
+ *
+ * Copyright 2018 NXP
+ *
+ * Sriram Dash <sriram.dash@nxp.com>
+ *
+ * This file is dual-licensed: you can use it either under the terms
+ * of the GPL or the X11 license, at your option. Note that this dual
+ * licensing only applies to this file, and not this project as a
+ * whole.
+ *
+ *  a) This library is free software; you can redistribute it and/or
+ *     modify it under the terms of the GNU General Public License as
+ *     published by the Free Software Foundation; either version 2 of the
+ *     License, or (at your option) any later version.
+ *
+ *     This library is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ * Or, alternatively,
+ *
+ *  b) Permission is hereby granted, free of charge, to any person
+ *     obtaining a copy of this software and associated documentation
+ *     files (the "Software"), to deal in the Software without
+ *     restriction, including without limitation the rights to use,
+ *     copy, modify, merge, publish, distribute, sublicense, and/or
+ *     sell copies of the Software, and to permit persons to whom the
+ *     Software is furnished to do so, subject to the following
+ *     conditions:
+ *
+ *     The above copyright notice and this permission notice shall be
+ *     included in all copies or substantial portions of the Software.
+ *
+ *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
+ *     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+ *     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ *     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ *     OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+/dts-v1/;
+
+#include <DeviceTreeInclude/fsl-lx2160a.dtsi>
+
+/ {
+  model = "NXP Layerscape LX2160A COM express type 7 module";
+  compatible = "fsl,lx2160a-cex7", "fsl,lx2160a";
+
+  aliases {
+    crypto = &crypto;
+    serial0 = &uart0;
+    serial1 = &uart1;
+    serial2 = &uart2;
+    serial3 = &uart3;
+  };
+  chosen {
+    stdout-path = "serial0:115200n8";
+  };
+
+  soc {
+    pcie@3600000 {
+      status = "okay";
+    };
+
+    pcie@3800000 {
+      status = "okay";
+    };
+  };
+};
+
+&uart0 {
+  status = "okay";
+};
+
+&uart1 {
+  status = "okay";
+};
+
+&i2c0 {
+  status = "okay";
+  pca9547@77 {
+    compatible = "nxp,pca9548";
+    reg = <0x77>;
+    #address-cells = <1>;
+    #size-cells = <0>;
+
+
+    i2c@3 {
+      #address-cells = <1>;
+      #size-cells = <0>;
+      reg = <0x3>;
+
+      sa56004@4c {
+        compatible = "nxp,sa56004";
+        reg = <0x4c>;
+      };
+
+      sa56004@4d {
+        compatible = "nxp,sa56004";
+        reg = <0x4d>;
+      };
+    };
+  };
+};
+
+&i2c1 {
+  status = "disabled";
+};
+
+&i2c2 {
+  status = "okay";
+};
+
+&i2c3 {
+  status = "disabled";
+};
+
+&i2c4 {
+  status = "okay";
+
+  rtc@51 {
+    compatible = "nxp,pcf2129";
+    reg = <0x51>;
+    /* IRQ10_B */
+    interrupts = <0 150 0x4>;
+  };
+
+};
+
+&i2c5 {
+  status = "disabled";
+};
+
+&i2c6 {
+  status = "disabled";
+};
+
+&i2c7 {
+  status = "disabled";
+};
+
+&sata0 {
+  status = "okay";
+};
+
+&sata1 {
+  status = "okay";
+};
+
+&sata2 {
+  status = "okay";
+};
+
+&sata3 {
+  status = "okay";
+};
+
+&usb0 {
+  status = "okay";
+};
+
+&usb1 {
+  status = "okay";
+};
+
+&esdhc0 {
+  sd-uhs-sdr104;
+  sd-uhs-sdr50;
+  sd-uhs-sdr25;
+  sd-uhs-sdr12;
+  status = "okay";
+};
+
+&esdhc1 {
+  mmc-hs200-1_8v;
+  mmc-hs400-1_8v;
+  bus-width = <8>;
+  status = "okay";
+};
+
+&fspi {
+  status = "okay";
+//  nxp,fspi-has-second-chip;
+  uefi-runtime;
+
+  flash0: mt35xu512aba@0 {
+    #address-cells = <1>;
+    #size-cells = <1>;
+    compatible = "micron,m25p80";
+    m25p,fast-read;
+    spi-max-frequency = <50000000>;
+    reg = <0>;
+    /* The following setting enables 1-1-8 (CMD-ADDR-DATA) mode */
+    spi-rx-bus-width = <8>; /* 8 SPI Rx lines */
+    spi-tx-bus-width = <1>; /* 1 SPI Tx line */
+    uefi-runtime;
+  };
+
+};
+
+&crypto {
+  status = "okay";
+};
+
+&emdio1 {
+  rgmii_phy1: ethernet-phy@1 {
+    /* AR8035 PHY - "compatible" property not strictly needed */
+    compatible = "ethernet-phy-id004d.d072";
+    reg = <0x1>;
+    /* Poll mode - no "interrupts" property defined */
+  };
+  rgmii_phy2: ethernet-phy@2 {
+    /* AR8035 PHY - "compatible" property not strictly needed */
+    compatible = "ethernet-phy-id004d.d072";
+    reg = <0x2>;
+    /* Poll mode - no "interrupts" property defined */
+  };
+  aquantia_phy3: ethernet-phy@3 {
+    /* AQR107 PHY - "compatible" property not strictly needed */
+    compatible = "ethernet-phy-ieee802.3-c45";
+    reg = <0x4>;
+    /* Poll mode - no "interrupts" property defined */
+  };
+  aquantia_phy4: ethernet-phy@4 {
+    /* AQR107 PHY - "compatible" property not strictly needed */
+    compatible = "ethernet-phy-ieee802.3-c45";
+    reg = <0x5>;
+    /* Poll mode - no "interrupts" property defined */
+  };
+};
+
+&emdio2 {
+  inphi_phy: emdio2_phy@0 {
+    compatible = "ethernet-phy-ieee802.3-c45";
+    reg = <0x0>;
+    dev-addr = <0x1e>;
+    phy-connection-type = "xfi";
+    interrupts = <0 9 0x2>, <0 10 0x2>; /* high-to-low edge triggered */
+  };
+};
+&pcs_mdio5 {
+	pcs_phy7: ethernet-phy@0 {
+		compatible = "ethernet-phy-ieee802.3-c45";
+		backplane-mode = "10gbase-kr";
+		reg = <0x0>;
+		fsl,lane-handle = <&serdes1>;
+		fsl,lane-reg = <0xB00 0x100>; /* lane D */
+	};
+};
+&pcs_mdio6 {
+	pcs_phy8: ethernet-phy@0 {
+		compatible = "ethernet-phy-ieee802.3-c45";
+		backplane-mode = "10gbase-kr";
+		reg = <0x0>;
+		fsl,lane-handle = <&serdes1>;
+		fsl,lane-reg = <0xA00 0x100>; /* lane C */
+	};
+};
+&pcs_mdio7 {
+	pcs_phy9: ethernet-phy@0 {
+		compatible = "ethernet-phy-ieee802.3-c45";
+		backplane-mode = "10gbase-kr";
+		reg = <0x0>;
+		fsl,lane-handle = <&serdes1>;
+		fsl,lane-reg = <0x900 0x100>; /* lane B */
+	};
+};
+&pcs_mdio8 {
+	pcs_phy10: ethernet-phy@0 {
+		compatible = "ethernet-phy-ieee802.3-c45";
+		backplane-mode = "10gbase-kr";
+		reg = <0x0>;
+		fsl,lane-handle = <&serdes1>;
+		fsl,lane-reg = <0x800 0x100>; /* lane A */
+	};
+};
+&dpmac3 {
+//	phy-handle = <&pcs_phy3>;
+};
+&dpmac4 {
+//	phy-handle = <&pcs_phy4>;
+};
+&dpmac5 {
+//	phy-handle = <&pcs_phy5>;
+};
+&dpmac6 {
+//	phy-handle = <&pcs_phy6>;
+};
+&dpmac7 {
+	phy-handle = <&pcs_phy7>;
+};
+&dpmac8 {
+	phy-handle = <&pcs_phy8>;
+};
+&dpmac9 {
+	phy-handle = <&pcs_phy9>;
+};
+&dpmac10 {
+	phy-handle = <&pcs_phy10>;
+};
+
+&dpmac17 {
+	phy-handle = <&rgmii_phy1>;
+	phy-connection-type = "rgmii-id";
+};
+
+&dpmac18 {
+  phy-handle = <&rgmii_phy2>;
+  phy-connection-type = "rgmii-id";
+};
+
+&can0 {
+  status = "okay";
+};
+
+&can1 {
+  status = "okay";
+};
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/Include/Library/Dpaa2BoardSpecificLib.h b/Platform/NXP/LX2160aCex7Pkg/Include/Library/Dpaa2BoardSpecificLib.h
new file mode 100644
index 0000000..ddf8e70
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Include/Library/Dpaa2BoardSpecificLib.h
@@ -0,0 +1,60 @@
+/** Dpaa2BoardSpecificLib.h
+  DPAA2 Board Specific library interface
+
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution. The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+**/
+
+#ifndef __DPAA2_BOARD_SPECIFIC_LIB_H__
+#define __DPAA2_BOARD_SPECIFIC_LIB_H__
+
+#include <Library/Dpaa2EthernetPhyLib.h>
+#include <Library/PcdLib.h>
+#include <SerDes.h>
+#include <Uefi.h>
+
+/**
+ * Number of Ethernet PHY MDIO buses
+ */
+#define DPAA2_MDIO_BUSES_COUNT                  FixedPcdGet8  (PcdMdioBustCount)
+#define DPAA2_WRIOP1_MDIO1_ADDR                 FixedPcdGet64 (PcdDpaa2Wriop1Mdio1Addr)
+#define DPAA2_WRIOP1_MDIO2_ADDR                 FixedPcdGet64 (PcdDpaa2Wriop1Mdio2Addr)
+
+/*
+ * DPAA2 Ethernet PHY MDIO addresses
+ */
+#define CORTINA_PHY_ADDR1   0x0
+#define CORTINA_PHY_ADDR2   0x11
+#define CORTINA_PHY_ADDR3   0x12
+#define CORTINA_PHY_ADDR4   0x13
+
+#define AQUANTIA_PHY_ADDR1  0x4
+#define AQUANTIA_PHY_ADDR2  0x5
+
+#define QC_PHY_ADDR1  0x1
+#define QC_PHY_ADDR2  0x2
+
+#define INPHI_PHY_ADDR1     0x0
+
+VOID
+Dpaa2DiscoverWriopDpmac (
+  SERDES_PROTOCOL LaneProtocol,
+  VOID *Arg
+  );
+
+VOID ProbeDpaaLanes (
+  VOID *Arg
+  );
+
+//extern DPAA2_PHY_MDIO_BUS gDpaa2MdioBuses[];
+
+#endif /* __DPAA2_BOARD_SPECIFIC_LIB_H__ */
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/Include/Library/FpgaLib.h b/Platform/NXP/LX2160aCex7Pkg/Include/Library/FpgaLib.h
new file mode 100644
index 0000000..3f522d9
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Include/Library/FpgaLib.h
@@ -0,0 +1,163 @@
+/** FpgaLib.h
+*  Header defining the LS2160a Fpga specific constants (Base addresses, sizes, flags)
+*
+*  Copyright 2019 SolidRun
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+**/
+
+#ifndef __LX2160A_FPGA_H__
+#define __LX2160A_FPGA_H__
+
+typedef enum {
+  CLK_66,
+  CLK_83,
+  CLK_100,
+  CLK_125,
+  CLK_133
+} SYSTEM_CLOCK;
+
+/*
+ * FPGA register set of LS2160ACEX7 board-specific.
+ */
+typedef struct {
+  UINT8 Id;           // ID value uniquely identifying each QorIQ board type
+  UINT8 Arch;         // Board Version
+  UINT8 Ver;          // FPGA Version
+  UINT8 Model;        // Programming Model
+  UINT8 Minor;        // Minor Revision Number
+  UINT8 CtlSys;
+  UINT8 Aux;
+  UINT8 ClkSpd;
+  UINT8 StatDut;
+  UINT8 StatSys;
+  UINT8 StatAlrm;
+  UINT8 Present;
+  UINT8 Present2;
+  UINT8 RcwCtl;
+  UINT8 CtlLed;
+  UINT8 I2cBlk;
+  UINT8 RcfgCtl;
+  UINT8 RcfgSt;
+  UINT8 DcmAd;
+  UINT8 DcmDa;
+  UINT8 Dcmd;
+  UINT8 Dmsg;
+  UINT8 Gdc;
+  UINT8 Gdd;
+  UINT8 Dmack;
+  UINT8 Res1[6];
+  UINT8 Watch;
+  UINT8 PwrCtl[2];
+  UINT8 Res2[2];
+  UINT8 PwrStat[4];
+  UINT8 Res3[8];
+  UINT8 ClkSpd2[2];
+  UINT8 Res4[2];
+  UINT8 Sclk[3];
+  UINT8 Res5;
+  UINT8 Dclk[3];
+  UINT8 Res6;
+  UINT8 ClkDspd[3];
+  UINT8 Res7;
+  UINT8 RstCtl;
+  UINT8 RstStat;
+  UINT8 RstRsn;
+  UINT8 RstFrc[2];
+  UINT8 Res8[11];
+  UINT8 BrdCfg[16];
+  UINT8 DutCfg[16];
+  UINT8 RcwAd[2];
+  UINT8 RcwData;
+  UINT8 Res9[5];
+  UINT8 PostCtl;
+  UINT8 PostStat;
+  UINT8 PostDat[2];
+  UINT8 Pid[4];
+  UINT8 GpioIo[4];
+  UINT8 GpioDir[4];
+  UINT8 Res10[20];
+  UINT8 RjtagCtl;
+  UINT8 RjtagDat;
+  UINT8 Res11[2];
+  UINT8 TrigSrc[4];
+  UINT8 TrigDst[4];
+  UINT8 TrigStat;
+  UINT8 Res12[3];
+  UINT8 TrigCtr[4];
+  UINT8 Res13[16];
+  UINT8 ClkFreq[6];
+  UINT8 ResC6[8];
+  UINT8 ClkBase[2];
+  UINT8 ResD0[8];
+  UINT8 Cms[2];
+  UINT8 ResC0[6];
+  UINT8 Aux2[4];
+  UINT8 Res14[10];
+  UINT8 AuxAd;
+  UINT8 AuxDa;
+  UINT8 Res15[16];
+} FFPGA_REG_SET;
+
+/**
+   Function to read FPGA register.
+**/
+UINT8
+FpgaRead (
+  UINTN  Reg
+  );
+
+/**
+   Function to write FPGA register.
+**/
+VOID
+FpgaWrite (
+  UINTN  Reg,
+  UINT8  Value
+  );
+
+/**
+   Function to initialize FPGA timings.
+**/
+VOID
+FpgaInit (
+  VOID
+  );
+
+/**
+   Function to get system clock frequency.
+**/
+UINTN
+GetBoardSysClk (
+  VOID
+  );
+
+/**
+   Function to print board personality.
+**/
+VOID
+PrintBoardPersonality (
+  VOID
+  );
+
+#define QIXIS_BASE_I2C_BUS            0
+#define QIXIS_BASE_I2C_ADR            0x66
+
+//SYSCLK
+#define FPGA_CLK_MASK            0x03     // FPGA Clock Mask
+#define SYSCLK_100_MHZ           100000000
+
+#define FPGA_VBANK_MASK          0x07
+#define FPGA_CS_MASK             0x08
+
+#define FPGA_READ(Reg)           FpgaRead (OFFSET_OF (FPGA_REG_SET, Reg))
+#define FPGA_WRITE(Reg, Value)   FpgaWrite (OFFSET_OF (FPGA_REG_SET, Reg), Value)
+
+#endif // __LS2160A_FPGA_H__
diff --git a/Platform/NXP/LX2160aCex7Pkg/Include/Library/PlatformLib.h b/Platform/NXP/LX2160aCex7Pkg/Include/Library/PlatformLib.h
new file mode 100644
index 0000000..cc9cbee
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Include/Library/PlatformLib.h
@@ -0,0 +1,93 @@
+/** LX2160aCex7.h
+*  Header defining the LX2160aCex7 constants (Base addresses, sizes, flags)
+*
+*  Copyright 2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+**/
+
+#ifndef __LX2160ACEX7_PLATFORM_H__
+#define __LX2160ACEX7_PLATFORM_H__
+
+// Base address of i2c controllers
+#define I2C0_BASE_ADDRESS                          0x02000000
+#define I2C1_BASE_ADDRESS                          0x02010000
+#define I2C2_BASE_ADDRESS                          0x02020000
+#define I2C3_BASE_ADDRESS                          0x02030000
+#define I2C4_BASE_ADDRESS                          0x02040000
+#define I2C5_BASE_ADDRESS                          0x02050000
+#define I2C6_BASE_ADDRESS                          0x02060000
+#define I2C7_BASE_ADDRESS                          0x02070000
+// Size of each controller
+#define I2C_SIZE                                   0x10000
+#define I2C_BUS_MAX                                8
+#define I2C_DEBUG_REG                              0x6
+#define I2C_GLITCH_EN                              0x8
+
+
+#define SCFG_BASE_ADDR                             0x1FC0000
+#define SCFG_SIZE                                  0x0010000
+
+#define LX2160A_DDR_ADDR                           0x01080000
+#define LX2160A_DDR2_ADDR                          0x01090000
+
+// USB specific values and register
+// To do : Verify with RM (when available)
+#define SCFG_USB3PRM1CR                            0x000
+#define SCFG_USB3PRM1CR_INIT                       0x27672b2a
+#define SCFG_USB3PRM2CR                            0x004
+#define USB_TXVREFTUNE                             0x9
+#define USB_SQRXTUNE                               0xFC7FFFFF
+
+#define DCSR_BASE                                  0x700000000ULL
+#define DCSR_USB_PHY1                              0x4600000
+#define DCSR_USB_PHY2                              0x4610000
+#define DCSR_USB_PHY_RX_OVRD_IN_HI                 0x1006
+#define USB_PHY_RX_EQ_VAL_1                        0x0000
+#define USB_PHY_RX_EQ_VAL_2                        0x0080
+#define USB_PHY_RX_EQ_VAL_3                        0x0380
+#define USB_PHY_RX_EQ_VAL_4                        0x0b80
+
+/* TZ Protection Controller Definitions */
+#define NXP_TZPC_BASE                              0x02200000
+#define NXP_TZPCR0SIZE_BASE                        (NXP_TZPC_BASE)
+#define NXP_TZPCDECPROT_0_STAT_BASE                (NXP_TZPC_BASE + 0x800)
+#define NXP_TZPCDECPROT_0_SET_BASE                 (NXP_TZPC_BASE + 0x804)
+#define NXP_TZPCDECPROT_0_CLR_BASE                 (NXP_TZPC_BASE + 0x808)
+
+/* NXP_TZ Address Space Controller Definitions */
+#define NXP_TZASC1_BASE                            0x01100000  /* as per CCSR map. */
+#define NXP_TZASC_GATE_KEEPER(x)                   ((NXP_TZASC1_BASE + (x * 0x10000)) + 0x008)
+#define NXP_TZASC_REGION_ATTRIBUTES_0(x)           ((NXP_TZASC1_BASE + (x * 0x10000)) + 0x110)
+#define NXP_TZASC_REGION_ID_ACCESS_0(x)            ((NXP_TZASC1_BASE + (x * 0x10000)) + 0x114)
+#define SVR_DEV_LX2160                             0x8736
+
+/* TrustZone Protection Controller Definitions */
+#define TZPC_BASE_ADDR                            0x02200000
+#define TZPC_DCFG_RESET_BIT_MASK                  0x08
+
+// to do check these base addresses
+#define CONFIG_SYS_FSL_DCSR_DDR_ADDR              0x70012c000ULL
+#define CONFIG_SYS_FSL_DCSR_DDR2_ADDR             0x70012d000ULL
+#define CONFIG_SYS_FSL_DCSR_DDR3_ADDR             0x700132000ULL
+
+/* SMMU Defintions */
+#define SMMU_BASE_ADDR                            0x05000000
+#define SMMU_REG_SCR0                             (SMMU_BASE_ADDR + 0x0)
+#define SMMU_REG_SACR                             (SMMU_BASE_ADDR + 0x10)
+#define SMMU_REG_IDR1                             (SMMU_BASE_ADDR + 0x24)
+#define SMMU_REG_NSCR0                            (SMMU_BASE_ADDR + 0x400)
+#define SMMU_REG_NSACR                            (SMMU_BASE_ADDR + 0x410)
+
+#define SACR_PAGESIZE_MASK                        0x00010000
+#define SCR0_CLIENTPD_MASK                        0x00000001
+#define SCR0_USFCFG_MASK                          0x00000400
+#define CONFIG_SYS_FSL_DDR_LE
+#endif
diff --git a/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec b/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec
new file mode 100644
index 0000000..d966b8f
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec
@@ -0,0 +1,29 @@
+#  LX2160aCex7Pkg.dec
+#  LX2160a board package.
+#
+#  Copyright 2018 NXP
+#
+#  This program and the accompanying materials are licensed and made available under
+#  the terms and conditions of the BSD License which accompanies this distribution.
+#  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+
+[Defines]
+  PACKAGE_NAME                   = LX2160aCex7Pkg
+  PACKAGE_GUID                   = 474e0c59-5f77-4060-82dd-9025ee4f4939
+
+################################################################################
+#
+# Include Section - list of Include Paths that are provided by this package.
+#                   Comments are used for Keywords and Module Types.
+#
+# Supported Module Types:
+#  BASE SEC PEI_CORE PEIM DXE_CORE DXE_DRIVER DXE_RUNTIME_DRIVER DXE_SMM_DRIVER DXE_SAL_DRIVER UEFI_DRIVER UEFI_APPLICATION
+#
+################################################################################
+[Includes.common]
+  Include                        # Root include for the package
diff --git a/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dsc b/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dsc
new file mode 100644
index 0000000..371877b
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dsc
@@ -0,0 +1,217 @@
+#  LX2160aCex7Pkg.dsc
+#
+#  LX2160ACEX7 Module package.
+#
+#  Copyright 2019 SolidRun ltd.
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution. The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+
+################################################################################
+#
+# Defines Section - statements that will be processed to create a Makefile.
+#
+################################################################################
+[Defines]
+  #
+  # Defines for default states.  These can be changed on the command line.
+  # -D FLAG=VALUE
+  #
+  PLATFORM_NAME                  = LX2160aCex7Pkg
+  PLATFORM_GUID                  = be06d8bc-05eb-44d6-b39f-191e93617ebd
+  OUTPUT_DIRECTORY               = Build/LX2160aCex7Pkg
+  FLASH_DEFINITION               = Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.fdf
+  DEFINE MC_HIGH_MEM             = TRUE
+
+!include Platform/NXP/NxpQoriqLs.dsc
+!include Silicon/NXP/Chassis/Chassis3V2/Chassis3V2.dsc
+!include Silicon/NXP/LX2160A/LX2160A.dsc
+
+[LibraryClasses.common]
+  ArmPlatformLib|Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.inf
+  ResetSystemLib|ArmPkg/Library/ArmSmcPsciResetSystemLib/ArmSmcPsciResetSystemLib.inf
+  PL011UartLib|ArmPlatformPkg/Library/PL011UartLib/PL011UartLib.inf
+  PL011UartClockLib|Silicon/NXP/Library/PL011UartClockLib/PL011UartClockLib.inf
+  SerialPortLib|ArmPlatformPkg/Library/PL011SerialPortLib/PL011SerialPortLib.inf
+  BeIoLib|Silicon/NXP/Library/BeIoLib/BeIoLib.inf
+  SocLib|Silicon/NXP/Chassis/LX2160aSocLib.inf
+  RealTimeClockLib|Silicon/NXP/Library/Pcf2129RtcLib/Pcf2129RtcLib.inf
+  FpgaLib|Platform/NXP/LX2160aRdbPkg/Library/FpgaLib/FpgaLib.inf
+  PciSegmentLib|Silicon/NXP/Library/PciSegmentLib/PciSegmentLib.inf
+  PciHostBridgeLib|Silicon/NXP/Library/PciHostBridgeLib/PciHostBridgeLib.inf
+  MmcLib|Silicon/NXP/Library/MmcLib/MmcLib.inf
+  ItbParseLib|Silicon/NXP/Library/ItbParseLib/ItbParse.inf
+  Dpaa2BoardSpecificLib|Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2BoardSpecificLib.inf
+  Dpaa2EthernetMacLib|Silicon/NXP/Library/Dpaa2EthernetMacLib/Dpaa2EthernetMacLib.inf
+  Dpaa2EthernetPhyLib|Silicon/NXP/Library/Dpaa2EthernetPhyLib/Dpaa2EthernetPhyLib.inf
+  Dpaa2ManagementComplexLib|Silicon/NXP/Library/Dpaa2ManagementComplexLib/Dpaa2ManagementComplexLib.inf
+  Dpaa2McInterfaceLib|Silicon/NXP/Library/Dpaa2McInterfaceLib/Dpaa2McInterfaceLib.inf
+  SecureMonRngLib|Silicon/NXP/Library/SecureMonRngLib/SecureMonRngLib.inf
+  MemoryInitPeiLib|Silicon/NXP/Library/MemoryInitPei/MemoryInitPeiLib.inf
+
+[PcdsFeatureFlag.common]
+  gEfiMdeModulePkgTokenSpaceGuid.PcdInstallAcpiSdtProtocol|TRUE
+
+[PcdsFixedAtBuild.common]
+
+!if $(MC_HIGH_MEM) == TRUE                                        # Management Complex loaded at the end of DDR2
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McHighRamSize|0x80000000      # 2GB (must be 512MB aligned)
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McLowRamSize|0x0
+  gNxpQoriqLsTokenSpaceGuid.PcdMcHighMemSupport|1
+  gArmTokenSpaceGuid.PcdSystemMemoryBase|0x0080000000             # Actual base
+  gArmTokenSpaceGuid.PcdSystemMemorySize|0x007BE00000             # 2G - 66MB (ATF)
+!else
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McHighRamSize|0x0             # 512MB (Fixed)
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McLowRamSize|0x20000000       # 512MB (Fixed)
+  gNxpQoriqLsTokenSpaceGuid.PcdMcHighMemSupport|0
+  gArmTokenSpaceGuid.PcdSystemMemoryBase|0x0080000000
+  gArmTokenSpaceGuid.PcdSystemMemorySize|0x0040000000             # 2G - 512MB - 66MB (ATF), 512 MB aligned
+!endif
+  gArmPlatformTokenSpaceGuid.PcdSystemMemoryUefiRegionSize|0x02000000
+
+  #
+  # Board Specific Pcds
+  #
+
+  gNxpQoriqLsTokenSpaceGuid.PcdIn112525FwNorBaseAddr|0x20980000
+  gNxpQoriqLsTokenSpaceGuid.PcdIn112525FwSize|0x40000
+
+  # ARM SBSA WDT
+  gArmTokenSpaceGuid.PcdGenericWatchdogControlBase|0x23A0000
+  gArmTokenSpaceGuid.PcdGenericWatchdogRefreshBase|0x2390000
+  gArmTokenSpaceGuid.PcdGenericWatchdogEl2IntrNum|28
+
+  gEfiMdeModulePkgTokenSpaceGuid.PcdSerialRegisterBase|0x21C0000
+  gArmPlatformTokenSpaceGuid.PL011UartClkInHz|175000000
+  gNxpQoriqLsTokenSpaceGuid.PcdSerdes2Enabled|TRUE
+  gNxpQoriqLsTokenSpaceGuid.PcdPlatformFreqDiv|0x4
+  gNxpQoriqLsTokenSpaceGuid.PcdDdrClk|100000000
+
+  #
+  # RTC Pcds
+  #
+  gNxpQoriqLsTokenSpaceGuid.PcdI2cBus|4
+  gNxpQoriqLsTokenSpaceGuid.PcdI2cSpeed|100000
+  gNxpQoriqLsTokenSpaceGuid.PcdI2cSlaveAddress|0x51
+
+  gNxpQoriqLsTokenSpaceGuid.PcdSysEepromI2cBus|0
+  gNxpQoriqLsTokenSpaceGuid.PcdSysEepromI2cAddress|0x57
+
+  #
+  # NV Storage PCDs.
+  #
+  gArmTokenSpaceGuid.PcdVFPEnabled|1
+
+  #
+  # PCI PCDs.
+  #
+  gNxpQoriqLsTokenSpaceGuid.PcdPciDebug|FALSE
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieLutBase|0x80000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieLutDbg|0x407FC
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieExp1SysAddr|0x3400000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieExp2SysAddr|0x3500000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieExp3SysAddr|0x3600000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieExp4SysAddr|0x3700000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieExp5SysAddr|0x3800000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieExp6SysAddr|0x3900000
+  gNxpQoriqLsTokenSpaceGuid.PcdPcieConfigurePex|TRUE
+
+  #
+  # SATA Pcds
+  #
+  gNxpQoriqLsTokenSpaceGuid.PcdSataErratumA009185|TRUE
+
+  #
+  # DPAA2 Pcds
+  #
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2Initialize|TRUE
+  gNxpQoriqLsTokenSpaceGuid.PcdDisableMcLogging|FALSE
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McFwSrc|0x01
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McBootTimeoutMs|200000
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2UsedDpmacsMask|0xff00ff
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McLogMcDramOffset|0x1000000
+
+  # Valid values for PcdDpaa2McLogLevel:
+  # - 0x01: LOG_LEVEL_DEBUG
+  # - 0x02: LOG_LEVEL_INFO
+  # - 0x03: LOG_LEVEL_WARNING
+  # - 0x04: LOG_LEVEL_ERROR
+  # - 0x05: LOG_LEVEL_CRITICAL
+  # - 0x06: LOG_LEVEL_ASSERT
+  # - 0xFF: LOG_LEVEL_DEFAULT (default from DPC)
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McLogLevel|0xff
+
+  # Valid values for PcdDpaaDebugFlags:
+  # - 0x0      DPAA debug logs are disabled.
+  # - 0x1      Enable DPAA debugging messages
+  # - 0x2      Dump values of RAM words or registers
+  # - 0x4      Trace commands sent to the MC
+  # - 0x8      Dump MC log fragment
+  # - 0x10     Dump contents of the root DPRC
+  # - 0x20     Perform extra checks
+  # - 0x40     Trace network packets sent/received
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaaDebugFlags|0x0
+
+  gNxpQoriqLsTokenSpaceGuid.PcdFdtAddress|0x20F00000
+################################################################################
+#
+# Components Section - list of all EDK II Modules needed by this Platform
+#
+################################################################################
+[Components.common]
+  #
+  # Architectural Protocols
+  #
+  MdeModulePkg/Universal/Variable/RuntimeDxe/VariableRuntimeDxe.inf{
+     <LibraryClasses>
+     NULL|MdeModulePkg/Library/VarCheckUefiLib/VarCheckUefiLib.inf
+     NULL|EmbeddedPkg/Library/NvVarStoreFormattedLib/NvVarStoreFormattedLib.inf
+  }
+  MdeModulePkg/Universal/FaultTolerantWriteDxe/FaultTolerantWriteDxe.inf
+
+  ArmPkg/Drivers/GenericWatchdogDxe/GenericWatchdogDxe.inf
+  Silicon/NXP/Drivers/I2cDxe/I2cDxe.inf
+  EmbeddedPkg/RealTimeClockRuntimeDxe/RealTimeClockRuntimeDxe.inf
+  Silicon/NXP/Drivers/UsbHcdInitDxe/UsbHcd.inf
+  Silicon/NXP/Drivers/PciCpuIo2Dxe/PciCpuIo2Dxe.inf
+  Silicon/NXP/Library/Pcf2129RtcLib/Pcf2129RtcLib.inf
+  MdeModulePkg/Bus/Pci/PciHostBridgeDxe/PciHostBridgeDxe.inf {
+    <PcdsFixedAtBuild>
+  gEfiMdePkgTokenSpaceGuid.PcdDebugPrintErrorLevel|0x8010004F
+  }
+  MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf
+
+  Silicon/NXP/Drivers/LanIntelE1000Dxe/LanIntelE1000Dxe.inf
+
+  Silicon/NXP/Drivers/SataInitDxe/SataInitDxe.inf
+  Silicon/NXP/Drivers/MmcHostDxe/MmcHostDxe.inf
+  Silicon/NXP/Drivers/Dpaa2EthernetDxe/Dpaa2EthernetDxe.inf
+  Silicon/NXP/Drivers/RngDxe/RngDxe.inf
+  #
+  # DT support
+  #
+  Platform/NXP/LX2160aCex7Pkg/DeviceTree/DeviceTree.inf
+  Silicon/NXP/Drivers/DtPlatformDxe/DtPlatformDxe.inf
+
+  Silicon/NXP/Drivers/FlexSpiDxe/FspiDxe.inf
+  Silicon/NXP/Drivers/SpiBusDxe/SpiBusDxe.inf
+  Silicon/NXP/Drivers/SpiNorFlashDxe/SpiNorFlashDxe.inf
+  Silicon/NXP/Drivers/SpiConfigurationDxe/SpiConfigurationDxe.inf
+
+  #
+  # Acpi Support
+  #
+  MdeModulePkg/Universal/Acpi/AcpiPlatformDxe/AcpiPlatformDxe.inf
+
+  #
+  # Platform
+  #
+  Platform/NXP/LX2160aCex7Pkg/AcpiTables/AcpiTables.inf
+
+ ##
diff --git a/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.fdf b/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.fdf
new file mode 100644
index 0000000..9f9549c
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.fdf
@@ -0,0 +1,268 @@
+#  LX2160aCex7Pkg.fdf
+#
+#  FLASH layout file for LX2160a board.
+#
+#  Copyright 2018 NXP
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution. The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+
+################################################################################
+#
+# FD Section
+# The [FD] Section is made up of the definition statements and a
+# description of what goes into  the Flash Device Image.  Each FD section
+# defines one flash "device" image.  A flash device image may be one of
+# the following: Removable media bootable image (like a boot floppy
+# image,) an Option ROM image (that would be "flashed" into an add-in
+# card,) a System "Flash"  image (that would be burned into a system's
+# flash) or an Update ("Capsule") image that will be used to update and
+# existing system flash.
+#
+################################################################################
+
+[FD.LX2160aCex7_EFI]
+BaseAddress   = 0x82000000|gArmTokenSpaceGuid.PcdFdBaseAddress  #The base address of the FLASH Device.
+Size          = 0x00200000|gArmTokenSpaceGuid.PcdFdSize           #The size in bytes of the FLASH Device
+ErasePolarity = 1
+BlockSize     = 0x1
+NumBlocks     = 0x00200000
+
+################################################################################
+#
+# Following are lists of FD Region layout which correspond to the locations of different
+# images within the flash device.
+#
+# Regions must be defined in ascending order and may not overlap.
+#
+# A Layout Region start with a eight digit hex offset (leading "0x" required) followed by
+# the pipe "|" character, followed by the size of the region, also in hex with the leading
+# "0x" characters. Like:
+# Offset|Size
+# PcdOffsetCName|PcdSizeCName
+# RegionType <FV, DATA, or FILE>
+#
+################################################################################
+0x00000000|0x00200000
+gArmTokenSpaceGuid.PcdFvBaseAddress|gArmTokenSpaceGuid.PcdFvSize
+FV = FVMAIN_COMPACT
+
+!include ../FVRules.fdf.inc
+!include VarStore.fdf.inc
+################################################################################
+#
+# FV Section
+#
+# [FV] section is used to define what components or modules are placed within a flash
+# device file.  This section also defines order the components and modules are positioned
+# within the image.  The [FV] section consists of define statements, set statements and
+# module statements.
+#
+################################################################################
+
+[FV.FvMain]
+FvNameGuid         = 1037c42b-8452-4c41-aac7-41e6c31468da
+BlockSize          = 0x1
+NumBlocks          = 0         # This FV gets compressed so make it just big enough
+FvAlignment        = 8         # FV alignment and FV attributes setting.
+ERASE_POLARITY     = 1
+MEMORY_MAPPED      = TRUE
+STICKY_WRITE       = TRUE
+LOCK_CAP           = TRUE
+LOCK_STATUS        = TRUE
+WRITE_DISABLED_CAP = TRUE
+WRITE_ENABLED_CAP  = TRUE
+WRITE_STATUS       = TRUE
+WRITE_LOCK_CAP     = TRUE
+WRITE_LOCK_STATUS  = TRUE
+READ_DISABLED_CAP  = TRUE
+READ_ENABLED_CAP   = TRUE
+READ_STATUS        = TRUE
+READ_LOCK_CAP      = TRUE
+READ_LOCK_STATUS   = TRUE
+
+  INF MdeModulePkg/Core/Dxe/DxeMain.inf
+  INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf
+
+  #
+  # PI DXE Drivers producing Architectural Protocols (EFI Services)
+  #
+  INF ArmPkg/Drivers/CpuDxe/CpuDxe.inf
+
+  #
+  # DT support
+  #
+  INF RuleOverride = DTB Platform/NXP/LX2160aCex7Pkg/DeviceTree/DeviceTree.inf
+  INF Silicon/NXP/Drivers/DtPlatformDxe/DtPlatformDxe.inf
+
+  INF Silicon/NXP/Drivers/SpiBusDxe/SpiBusDxe.inf
+  INF Silicon/NXP/Drivers/SpiNorFlashDxe/SpiNorFlashDxe.inf
+  INF Silicon/NXP/Drivers/SpiConfigurationDxe/SpiConfigurationDxe.inf
+  INF Silicon/NXP/Drivers/FlexSpiDxe/FspiDxe.inf
+
+  INF MdeModulePkg/Core/RuntimeDxe/RuntimeDxe.inf
+  INF ArmPkg/Drivers/ArmGic/ArmGicDxe.inf
+  INF ArmPkg/Drivers/TimerDxe/TimerDxe.inf
+  INF ArmPkg/Drivers/GenericWatchdogDxe/GenericWatchdogDxe.inf
+  INF MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe.inf
+  INF MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe.inf
+  INF MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe.inf
+  INF EmbeddedPkg/EmbeddedMonotonicCounter/EmbeddedMonotonicCounter.inf
+  INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableRuntimeDxe.inf
+  INF MdeModulePkg/Universal/FaultTolerantWriteDxe/FaultTolerantWriteDxe.inf
+  INF MdeModulePkg/Universal/ResetSystemRuntimeDxe/ResetSystemRuntimeDxe.inf
+
+  INF Silicon/NXP/Drivers/I2cDxe/I2cDxe.inf
+
+  INF EmbeddedPkg/RealTimeClockRuntimeDxe/RealTimeClockRuntimeDxe.inf
+
+  #
+  # Multiple Console IO support
+  #
+  INF MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe.inf
+  INF MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe.inf
+  INF MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe.inf
+  INF MdeModulePkg/Universal/Console/TerminalDxe/TerminalDxe.inf
+  INF MdeModulePkg/Universal/SerialDxe/SerialDxe.inf
+
+  INF EmbeddedPkg/MetronomeDxe/MetronomeDxe.inf
+  INF EmbeddedPkg/SimpleTextInOutSerial/SimpleTextInOutSerial.inf
+
+
+  #
+  # PCI
+  #
+  INF Silicon/NXP/Drivers/PciCpuIo2Dxe/PciCpuIo2Dxe.inf
+  INF MdeModulePkg/Bus/Pci/PciHostBridgeDxe/PciHostBridgeDxe.inf
+  INF MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe.inf
+
+  #
+  # Network modules
+  #
+  INF  MdeModulePkg/Universal/Network/SnpDxe/SnpDxe.inf
+  INF  MdeModulePkg/Universal/Network/DpcDxe/DpcDxe.inf
+  INF  MdeModulePkg/Universal/Network/MnpDxe/MnpDxe.inf
+  INF  MdeModulePkg/Universal/Network/VlanConfigDxe/VlanConfigDxe.inf
+  INF  MdeModulePkg/Universal/Network/ArpDxe/ArpDxe.inf
+  INF  MdeModulePkg/Universal/Network/Dhcp4Dxe/Dhcp4Dxe.inf
+  INF  MdeModulePkg/Universal/Network/Ip4Dxe/Ip4Dxe.inf
+  INF  MdeModulePkg/Universal/Network/Mtftp4Dxe/Mtftp4Dxe.inf
+  INF  MdeModulePkg/Universal/Network/Udp4Dxe/Udp4Dxe.inf
+  INF  MdeModulePkg/Universal/Network/UefiPxeBcDxe/UefiPxeBcDxe.inf
+  INF  MdeModulePkg/Universal/Network/IScsiDxe/IScsiDxe.inf
+!if $(NETWORK_IP6_ENABLE) == TRUE
+  INF  NetworkPkg/Ip6Dxe/Ip6Dxe.inf
+  INF  NetworkPkg/TcpDxe/TcpDxe.inf
+  INF  NetworkPkg/Udp6Dxe/Udp6Dxe.inf
+  INF  NetworkPkg/Dhcp6Dxe/Dhcp6Dxe.inf
+  INF  NetworkPkg/Mtftp6Dxe/Mtftp6Dxe.inf
+  INF  NetworkPkg/UefiPxeBcDxe/UefiPxeBcDxe.inf
+!else
+  INF  MdeModulePkg/Universal/Network/Tcp4Dxe/Tcp4Dxe.inf
+!endif
+
+  INF Silicon/NXP/Drivers/LanIntelE1000Dxe/LanIntelE1000Dxe.inf
+
+  INF MdeModulePkg/Bus/Pci/NonDiscoverablePciDeviceDxe/NonDiscoverablePciDeviceDxe.inf
+
+  #
+  # DPAA2
+  #
+  INF Silicon/NXP/Drivers/Dpaa2EthernetDxe/Dpaa2EthernetDxe.inf
+
+  INF ShellPkg/DynamicCommand/TftpDynamicCommand/TftpDynamicCommand.inf
+
+  #
+  # AHCI Support
+  #
+  INF MdeModulePkg/Bus/Ata/AtaAtapiPassThru/AtaAtapiPassThru.inf
+  INF MdeModulePkg/Bus/Ata/AtaBusDxe/AtaBusDxe.inf
+  INF MdeModulePkg/Bus/Scsi/ScsiBusDxe/ScsiBusDxe.inf
+  INF MdeModulePkg/Bus/Scsi/ScsiDiskDxe/ScsiDiskDxe.inf
+  INF MdeModulePkg/Bus/Pci/SataControllerDxe/SataControllerDxe.inf
+  INF Silicon/NXP/Drivers/SataInitDxe/SataInitDxe.inf
+
+  #
+  # ACPI
+  #
+  INF RuleOverride=ACPITABLE Platform/NXP/LX2160aCex7Pkg/AcpiTables/AcpiTables.inf
+  INF MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe.inf
+  INF MdeModulePkg/Universal/Acpi/AcpiPlatformDxe/AcpiPlatformDxe.inf
+
+  #
+  # USB Support
+  #
+  INF MdeModulePkg/Bus/Pci/UhciDxe/UhciDxe.inf
+  INF MdeModulePkg/Bus/Pci/EhciDxe/EhciDxe.inf
+  INF MdeModulePkg/Bus/Pci/XhciDxe/XhciDxe.inf
+  INF MdeModulePkg/Bus/Usb/UsbBusDxe/UsbBusDxe.inf
+  INF MdeModulePkg/Bus/Usb/UsbMassStorageDxe/UsbMassStorageDxe.inf
+
+  INF Silicon/NXP/Drivers/UsbHcdInitDxe/UsbHcd.inf
+
+  #
+  # FAT filesystem + GPT/MBR partitioning
+  #
+  INF MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe.inf
+  INF MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe.inf
+  INF MdeModulePkg/Universal/Disk/PartitionDxe/PartitionDxe.inf
+  INF FatPkg/FatPei/FatPei.inf
+  INF FatPkg/EnhancedFatDxe/Fat.inf
+
+  #
+  # MMC
+  #
+  INF Silicon/NXP/Drivers/MmcHostDxe/MmcHostDxe.inf
+  INF EmbeddedPkg/Universal/MmcDxe/MmcDxe.inf
+
+  #
+  # RNG
+  #
+  INF Silicon/NXP/Drivers/RngDxe/RngDxe.inf
+
+  #
+  # UEFI application (Shell Embedded Boot Loader)
+  #
+  INF ShellPkg/Application/Shell/Shell.inf
+
+  #
+  # Bds
+  #
+  INF MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe.inf
+  INF MdeModulePkg/Universal/DisplayEngineDxe/DisplayEngineDxe.inf
+  INF MdeModulePkg/Universal/SetupBrowserDxe/SetupBrowserDxe.inf
+  INF MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
+  INF MdeModulePkg/Application/UiApp/UiApp.inf
+
+[FV.FVMAIN_COMPACT]
+FvAlignment        = 8
+ERASE_POLARITY     = 1
+MEMORY_MAPPED      = TRUE
+STICKY_WRITE       = TRUE
+LOCK_CAP           = TRUE
+LOCK_STATUS        = TRUE
+WRITE_DISABLED_CAP = TRUE
+WRITE_ENABLED_CAP  = TRUE
+WRITE_STATUS       = TRUE
+WRITE_LOCK_CAP     = TRUE
+WRITE_LOCK_STATUS  = TRUE
+READ_DISABLED_CAP  = TRUE
+READ_ENABLED_CAP   = TRUE
+READ_STATUS        = TRUE
+READ_LOCK_CAP      = TRUE
+READ_LOCK_STATUS   = TRUE
+
+  INF ArmPlatformPkg/PrePi/PeiUniCore.inf
+
+  FILE FV_IMAGE = 9E21FD93-9C72-4c15-8C4B-E77F1DB2D792 {
+    SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
+      SECTION FV_IMAGE = FVMAIN
+    }
+  }
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2BoardSpecificLib.inf b/Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2BoardSpecificLib.inf
new file mode 100644
index 0000000..09fff04
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2BoardSpecificLib.inf
@@ -0,0 +1,41 @@
+##@file
+#
+#  Component description file for Dpaa2BoardSpecificLib module
+#
+#  Copyright 2017 NXP
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution. The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+##
+
+[Defines]
+  INF_VERSION                    = 0x0001001A
+  BASE_NAME                      = Dpaa2BoardSpecificLib
+  FILE_GUID                      = c1c62f53-ee9c-49b0-a615-7c02acad4309
+  MODULE_TYPE                    = BASE
+  VERSION_STRING                 = 1.0
+  LIBRARY_CLASS                  = Dpaa2BoardSpecificLib
+
+[Sources.common]
+  Dpaa2LX2160aCex7.c
+
+[LibraryClasses]
+  SocLib
+
+[Packages]
+  MdePkg/MdePkg.dec
+  Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec
+  Silicon/NXP/Chassis/Chassis3V2/Chassis3V2.dec
+  Silicon/NXP/NxpQoriqLs.dec
+
+[FixedPcd]
+  gNxpQoriqLsTokenSpaceGuid.PcdMdioBustCount
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2Wriop1Mdio1Addr
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2Wriop1Mdio2Addr
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2LX2160aCex7.c b/Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2LX2160aCex7.c
new file mode 100644
index 0000000..dcfb272
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/Dpaa2BoardSpecificLib/Dpaa2LX2160aCex7.c
@@ -0,0 +1,189 @@
+/** Dpaa2LX2160aCex7.c
+  DPAA2 definitions specific for the LX2160aCEX7 board
+
+  Copyright 2017-2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution. The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+**/
+
+#include <Library/Dpaa2BoardSpecificLib.h>
+#include <Library/Dpaa2EthernetMacLib.h>
+#include <Library/Dpaa2EthernetPhyLib.h>
+#include <Library/DpaaDebugLib.h>
+
+
+/**
+ * Mapping of WRIOP DPMACs to Ethernet PHYs
+ */
+typedef struct _DPMAC_PHY_MAPPING {
+  /**
+   * Pointer to the MDIO bus that connects a DPMAC to a PHY
+   */
+  DPAA2_PHY_MDIO_BUS *MdioBus;
+
+  /**
+   * PHY address of the associated PHY
+   */
+  UINT8 PhyAddress;
+
+  /**
+   * PHY media type:
+   */
+  PHY_MEDIA_TYPE PhyMediaType;
+
+  /**
+   * PHY Id of the associated PHY
+   */
+  UINT8 PhyId;
+} DPMAC_PHY_MAPPING;
+
+/**
+ * PHY MDIO buses
+ */
+DPAA2_PHY_MDIO_BUS gDpaa2MdioBuses[] = {
+  [0] = {
+    .Signature = DPAA2_PHY_MDIO_BUS_SIGNATURE,
+    .IoRegs = (MEMAC_MDIO_BUS_REGS *)DPAA2_WRIOP1_MDIO1_ADDR,
+  },
+
+  [1] = {
+    .Signature = DPAA2_PHY_MDIO_BUS_SIGNATURE,
+    .IoRegs = (MEMAC_MDIO_BUS_REGS *)DPAA2_WRIOP1_MDIO2_ADDR,
+  },
+};
+
+/**
+ * Table of mappings of WRIOP DPMACs to PHYs
+ */
+// Checked dpmac 2, 3, 4
+// to be done 5 and 6 for inphy
+// 17 and 18 for rgmii
+
+static const DPMAC_PHY_MAPPING gDpmacToPhyMap[] = {
+
+  [WRIOP_DPMAC17] = {
+    .MdioBus = &gDpaa2MdioBuses[0],
+    .PhyAddress = QC_PHY_ADDR1,
+    .PhyMediaType = COPPER_PHY,
+    .PhyId        = QC_PHY,
+  },
+};
+
+STATIC VOID GetDpMacId (
+  SERDES_PROTOCOL LaneProtocol,
+  OUT WRIOP_DPMAC_ID *DpmacId
+  )
+{
+  switch(LaneProtocol) {
+    case XFI1...XFI14:
+      *DpmacId = (WRIOP_DPMAC_ID)(LaneProtocol - XFI1 + 1);
+       break;
+    case SGMII1...SGMII18:
+      *DpmacId = (WRIOP_DPMAC_ID)(LaneProtocol - SGMII1 + 1);
+       break;
+    case GE100_1...GE100_2:
+      *DpmacId = (WRIOP_DPMAC_ID)(LaneProtocol - GE100_1 + 1);
+       break;
+    case GE50_1...GE50_2:
+      *DpmacId = (WRIOP_DPMAC_ID)(LaneProtocol - GE50_1 + 1);
+       break;
+    case GE40_1...GE40_2:
+      *DpmacId = (WRIOP_DPMAC_ID)(LaneProtocol - GE40_1 + 1);
+       break;
+    case GE25_1...GE25_10:
+      *DpmacId = (WRIOP_DPMAC_ID)(LaneProtocol - GE25_1 + 1);
+       break;
+    default:
+      *DpmacId = 0;
+      break;
+  }
+}
+/**
+   SerDes lane probe callback
+
+   @param[in] LaneProtocol  SerDes lane protocol representing a device
+
+   @retval Lane index, if found
+   @retval -1, if not found
+
+ **/
+STATIC UINT32 AssignedMac[NUM_WRIOP_DPMACS] = {0};
+
+VOID
+Dpaa2DiscoverWriopDpmac (
+  SERDES_PROTOCOL LaneProtocol,
+  VOID *Arg
+  )
+{
+  WRIOP_DPMAC_ID DpmacId;
+  ASSERT (LaneProtocol != NONE);
+
+  return;
+  if (LaneProtocol >= XFI1 && LaneProtocol <= XFI14) {
+    GetDpMacId(LaneProtocol, &DpmacId);
+    if (!DpmacId || AssignedMac[DpmacId]) {
+      DEBUG((DEBUG_INFO, "Lane protocol %d, has mac %d, New Lane %d\n",
+                           AssignedMac[DpmacId], DpmacId, LaneProtocol));
+      return;
+    }
+    AssignedMac[DpmacId] = LaneProtocol;
+    ASSERT (DpmacId < ARRAY_SIZE (gDpmacToPhyMap));
+
+    if (DpmacId == WRIOP_DPMAC3 || DpmacId == WRIOP_DPMAC4) {
+      WriopDpmacInit (DpmacId,
+                     PHY_INTERFACE_XGMII,
+                     gDpmacToPhyMap[DpmacId].MdioBus,
+                     gDpmacToPhyMap[DpmacId].PhyAddress,
+                     gDpmacToPhyMap[DpmacId].PhyMediaType,
+                     gDpmacToPhyMap[DpmacId].PhyId,
+                     Arg);
+    }
+  }
+ 
+  if (LaneProtocol >= GE25_5 && LaneProtocol <= GE25_6) {
+    GetDpMacId(LaneProtocol, &DpmacId);
+    if (!DpmacId || AssignedMac[DpmacId]) {
+      DEBUG((DEBUG_INFO, "Lane protocol %d, has mac %d, New Lane %d\n",
+                           AssignedMac[DpmacId], DpmacId, LaneProtocol));
+      return;
+    }
+    AssignedMac[DpmacId] = LaneProtocol;
+    ASSERT (DpmacId < ARRAY_SIZE (gDpmacToPhyMap));
+
+    if (DpmacId == WRIOP_DPMAC5 || DpmacId == WRIOP_DPMAC6 ) {
+      WriopDpmacInit (DpmacId,
+                     PHY_INTERFACE_25G_AUI,
+                     gDpmacToPhyMap[DpmacId].MdioBus,
+                     gDpmacToPhyMap[DpmacId].PhyAddress,
+                     gDpmacToPhyMap[DpmacId].PhyMediaType,
+                     gDpmacToPhyMap[DpmacId].PhyId,
+                     Arg);
+    }
+  }
+}
+
+VOID ProbeDpaaLanes (
+  VOID *Arg
+  )
+{
+   WRIOP_DPMAC_ID DpmacId;
+  // Probe SerDes Lanes
+  SerDesProbeLanes (Dpaa2DiscoverWriopDpmac, Arg);
+   for (DpmacId = WRIOP_DPMAC17; DpmacId < WRIOP_DPMAC18; DpmacId++) {
+    WriopDpmacInit (DpmacId,
+                   PHY_INTERFACE_RGMII,
+                   gDpmacToPhyMap[DpmacId].MdioBus,
+                   gDpmacToPhyMap[DpmacId].PhyAddress,
+                   gDpmacToPhyMap[DpmacId].PhyMediaType,
+                   gDpmacToPhyMap[DpmacId].PhyId,
+                   Arg);
+  }
+}
+
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.c b/Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.c
new file mode 100644
index 0000000..5f15fc6
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.c
@@ -0,0 +1,77 @@
+/** @FpgaLib.c
+  Fpga Library for LX2160A-CEX7 module, containing functions to
+  program and read the Fpga registers.
+
+  FPGA is connected to IFC Controller and so MMIO APIs are used
+  to read/write FPGA registers
+
+  Copyright 2018 NXP
+
+  This program and the accompanying materials
+  are licensed and made available under the terms and conditions of the BSD License
+  which accompanies this distribution. The full text of the license may be found at
+  http://opensource.org/licenses/bsd-license.php
+
+  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+
+**/
+
+#include <Base.h>
+#include <Library/BaseLib.h>
+#include <Library/DebugLib.h>
+#include <Library/FpgaLib.h>
+#include <Library/I2c.h>
+
+/**
+   Function to read FPGA register.
+
+   @param  Reg  Register offset of FPGA to read.
+
+**/
+UINT8
+FpgaRead (
+  IN  UINTN  Reg
+  )
+{
+  return 0;
+}
+
+/**
+   Function to write FPGA register.
+
+   @param  Reg   Register offset of FPGA to write.
+   @param  Value Value to be written.
+
+**/
+VOID
+FpgaWrite (
+  IN  UINTN  Reg,
+  IN  UINT8  Value
+  )
+{
+}
+
+/**
+   Function to get board system clock frequency.
+
+**/
+UINTN
+GetBoardSysClk (
+  VOID
+  )
+{
+  return SYSCLK_100_MHZ;
+}
+
+/**
+   Function to print board personality.
+
+**/
+VOID
+PrintBoardPersonality (
+  VOID
+  )
+{
+  DEBUG ((DEBUG_INFO, "LX2160A COM express type 7 module\n"));
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.inf b/Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.inf
new file mode 100644
index 0000000..cc2b31f
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/FpgaLib/FpgaLib.inf
@@ -0,0 +1,32 @@
+#  @FpgaLib.inf
+#
+#  Copyright 2018 NXP
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution.  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+
+[Defines]
+  INF_VERSION                    = 0x0001001A
+  BASE_NAME                      = FpgaLib
+  FILE_GUID                      = dd2ce2f3-f219-4b57-82fd-f1ff8ae8bf5a
+  MODULE_TYPE                    = BASE
+  VERSION_STRING                 = 1.0
+  LIBRARY_CLASS                  = FpgaLib
+
+[Sources.common]
+  FpgaLib.c
+
+[Packages]
+  MdePkg/MdePkg.dec
+  Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec
+  Silicon/NXP/NxpQoriqLs.dec
+
+[LibraryClasses]
+  BaseLib
+  IoLib
+  I2cLib
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.c b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.c
new file mode 100644
index 0000000..e7d5ca2
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.c
@@ -0,0 +1,105 @@
+/** ArmPlatformLib.c
+*
+*  Contains board initialization functions.
+*
+*  Based on BeagleBoardPkg/Library/BeagleBoardLib/BeagleBoard.c
+*
+*  Copyright (c) 2011-2012, ARM Limited. All rights reserved.
+*  Copyright (c) 2016, Freescale Semiconductor, Inc. All rights reserved.
+*  Copyright 2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution.  The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+**/
+
+#include <Library/ArmPlatformLib.h>
+#include <Ppi/ArmMpCoreInfo.h>
+
+extern VOID SocInit (VOID);
+
+/**
+  Return the current Boot Mode
+
+  This function returns the boot reason on the platform
+
+**/
+EFI_BOOT_MODE
+ArmPlatformGetBootMode (
+  VOID
+  )
+{
+  return BOOT_WITH_FULL_CONFIGURATION;
+}
+
+/**
+  Placeholder for Platform Initialization
+
+**/
+EFI_STATUS
+ArmPlatformInitialize (
+  IN  UINTN   MpId
+  )
+{
+  SocInit ();
+  return EFI_SUCCESS;
+}
+
+ARM_CORE_INFO LX2160aMpCoreInfoCTA72x8[] = {
+  {
+    // Cluster 0, Core 0
+    0x0, 0x0,
+
+    // MP Core MailBox Set/Get/Clear Addresses and Clear Value
+    (EFI_PHYSICAL_ADDRESS)0,
+    (EFI_PHYSICAL_ADDRESS)0,
+    (EFI_PHYSICAL_ADDRESS)0,
+    (UINT64)0xFFFFFFFF
+  },
+};
+
+EFI_STATUS
+PrePeiCoreGetMpCoreInfo (
+  OUT UINTN                   *CoreCount,
+  OUT ARM_CORE_INFO           **ArmCoreTable
+  )
+{
+  *CoreCount    = sizeof (LX2160aMpCoreInfoCTA72x8) / sizeof (ARM_CORE_INFO);
+  *ArmCoreTable = LX2160aMpCoreInfoCTA72x8;
+
+  return EFI_SUCCESS;
+}
+
+ARM_MP_CORE_INFO_PPI mMpCoreInfoPpi = { PrePeiCoreGetMpCoreInfo };
+
+EFI_PEI_PPI_DESCRIPTOR      gPlatformPpiTable[] = {
+  {
+    EFI_PEI_PPI_DESCRIPTOR_PPI,
+    &gArmMpCoreInfoPpiGuid,
+    &mMpCoreInfoPpi
+  }
+};
+
+VOID
+ArmPlatformGetPlatformPpiList (
+  OUT UINTN                   *PpiListSize,
+  OUT EFI_PEI_PPI_DESCRIPTOR  **PpiList
+  )
+{
+  *PpiListSize = sizeof (gPlatformPpiTable);
+  *PpiList = gPlatformPpiTable;
+}
+
+
+UINTN
+ArmPlatformGetCorePosition (
+  IN UINTN MpId
+  )
+{
+  return 1;
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.inf b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.inf
new file mode 100644
index 0000000..bd96c4f
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/ArmPlatformLib.inf
@@ -0,0 +1,75 @@
+#/**  @file
+#
+#  Copyright (c) 2016, Freescale Semiconductor, Inc. All rights reserved.
+#  Copyright 2018 NXP
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution.  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#**/
+
+[Defines]
+  INF_VERSION                    = 0x0001001A
+  BASE_NAME                      = PlatformLib
+  FILE_GUID                      = d1361285-8a47-421c-9efd-6b262c9093fc
+  MODULE_TYPE                    = BASE
+  VERSION_STRING                 = 1.0
+  LIBRARY_CLASS                  = ArmPlatformLib
+
+[Packages]
+  ArmPkg/ArmPkg.dec
+  ArmPlatformPkg/ArmPlatformPkg.dec
+  EmbeddedPkg/EmbeddedPkg.dec
+  MdePkg/MdePkg.dec
+  Silicon/NXP/NxpQoriqLs.dec
+  Platform/NXP/LX2160aCex7Pkg/LX2160aCex7Pkg.dec
+
+[LibraryClasses]
+  ArmLib
+  SocLib
+
+[Sources.common]
+  ArmPlatformLib.c
+  NxpQoriqLsHelper.S    | GCC
+  NxpQoriqLsMem.c
+
+
+[Ppis]
+  gArmMpCoreInfoPpiGuid
+
+[Pcd]
+  gArmTokenSpaceGuid.PcdSystemMemoryBase
+  gArmTokenSpaceGuid.PcdSystemMemorySize
+
+[FixedPcd]
+  gArmTokenSpaceGuid.PcdArmPrimaryCore
+  gNxpQoriqLsTokenSpaceGuid.PcdCcsrBaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdCcsrSize
+  gNxpQoriqLsTokenSpaceGuid.PcdQspiRegionBaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdQspiRegionSize
+  gNxpQoriqLsTokenSpaceGuid.PcdQspiRegion2BaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdQspiRegion2Size
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp1BaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp1BaseSize
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp2BaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp2BaseSize
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp3BaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp3BaseSize
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp4BaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdPciExp4BaseSize
+  gNxpQoriqLsTokenSpaceGuid.PcdMcHighMemSupport
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McPortalBaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McPortalSize
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2NiPortalsBaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2NiPortalsSize
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2QBmanPortalsBaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2QBmanPortalSize
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2QBmanPortalsCacheSize
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McHighRamSize
+  gNxpQoriqLsTokenSpaceGuid.PcdDpaa2McLowRamSize
+  gNxpQoriqLsTokenSpaceGuid.PcdRomBaseAddr
+  gNxpQoriqLsTokenSpaceGuid.PcdRomSize
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsHelper.S b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsHelper.S
new file mode 100644
index 0000000..f05cbcd
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsHelper.S
@@ -0,0 +1,35 @@
+#/**  @file
+#
+#  Copyright (c) 2012-2013, ARM Limited. All rights reserved.
+#  Copyright 2018 NXP
+#
+#  This program and the accompanying materials
+#  are licensed and made available under the terms and conditions of the BSD License
+#  which accompanies this distribution.  The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+#
+#**/
+
+#include <AsmMacroIoLibV8.h>
+#include <AutoGen.h>
+
+.text
+.align 2
+
+GCC_ASM_IMPORT(ArmReadMpidr)
+
+ASM_FUNC(ArmPlatformIsPrimaryCore)
+  tst x0, #3
+  cset x0, eq
+  ret
+
+ASM_FUNC(ArmPlatformPeiBootAction)
+  ret
+
+ASM_FUNC(ArmPlatformGetPrimaryCoreMpId)
+  MOV32 (x0, FixedPcdGet32(PcdArmPrimaryCore))
+  ldrh   w0, [x0]
+  ret
diff --git a/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsMem.c b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsMem.c
new file mode 100644
index 0000000..915d1ec
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/Library/PlatformLib/NxpQoriqLsMem.c
@@ -0,0 +1,155 @@
+/** NxpQoriqLsMem.c
+*
+*  Board memory specific Library.
+*
+*  Based on BeagleBoardPkg/Library/BeagleBoardLib/BeagleBoardMem.c
+*
+*  Copyright (c) 2011, ARM Limited. All rights reserved.
+*  Copyright (c) 2016, Freescale Semiconductor, Inc. All rights reserved.
+*  Copyright 2018 NXP
+*
+*  This program and the accompanying materials
+*  are licensed and made available under the terms and conditions of the BSD License
+*  which accompanies this distribution. The full text of the license may be found at
+*  http://opensource.org/licenses/bsd-license.php
+*
+*  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
+*
+**/
+
+#include <Library/ArmPlatformLib.h>
+#include <Library/DebugLib.h>
+#include <Library/PcdLib.h>
+#include <Library/MemoryAllocationLib.h>
+
+#include <DramInfo.h>
+
+#define MAX_VIRTUAL_MEMORY_MAP_DESCRIPTORS          25
+
+/**
+  Return the Virtual Memory Map of your platform
+
+  This Virtual Memory Map is used by MemoryInitPei Module to initialize the MMU on your platform.
+
+  @param  VirtualMemoryMap     Array of ARM_MEMORY_REGION_DESCRIPTOR describing a Physical-to-
+                               Virtual Memory mapping. This array must be ended by a zero-filled
+                               entry
+
+**/
+
+VOID
+ArmPlatformGetVirtualMemoryMap (
+  IN  ARM_MEMORY_REGION_DESCRIPTOR ** VirtualMemoryMap
+  )
+{
+  ARM_MEMORY_REGION_ATTRIBUTES     CacheAttributes;
+  UINTN                            Index;
+  ARM_MEMORY_REGION_DESCRIPTOR     *VirtualMemoryTable;
+  UINTN                            I;
+  DRAM_INFO                        DramInfo;
+
+  I = 0;
+
+  ASSERT (VirtualMemoryMap != NULL);
+
+  VirtualMemoryTable = (ARM_MEMORY_REGION_DESCRIPTOR*)AllocatePages (
+          EFI_SIZE_TO_PAGES (sizeof (ARM_MEMORY_REGION_DESCRIPTOR) * MAX_VIRTUAL_MEMORY_MAP_DESCRIPTORS));
+
+  if (VirtualMemoryTable == NULL) {
+    return;
+  }
+
+  if (GetDramBankInfo (&DramInfo)) {
+    DEBUG ((DEBUG_ERROR, "Failed to get DRAM information, exiting...\n"));
+    return;
+  }
+
+  CacheAttributes = ARM_MEMORY_REGION_ATTRIBUTE_WRITE_BACK;
+
+  for (Index = 0; Index < DramInfo.NumOfDrams; Index++) {
+    // DRAM1 (Must be 1st entry)
+    VirtualMemoryTable[Index].PhysicalBase = DramInfo.DramRegion[Index].BaseAddress;
+    VirtualMemoryTable[Index].VirtualBase  = DramInfo.DramRegion[Index].BaseAddress;
+    VirtualMemoryTable[Index].Length       = DramInfo.DramRegion[Index].Size;
+    VirtualMemoryTable[Index].Attributes   = CacheAttributes;
+  }
+  // CCSR Space
+  VirtualMemoryTable[Index].PhysicalBase = FixedPcdGet64 (PcdCcsrBaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdCcsrBaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdCcsrSize);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+
+  // ROM Space
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdRomBaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdRomBaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdRomSize);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+
+  // FSPI region 1
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdQspiRegionBaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdQspiRegionBaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdQspiRegionSize);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_UNCACHED_UNBUFFERED;
+
+  // FSPI region 2
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdQspiRegion2BaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdQspiRegion2BaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdQspiRegion2Size);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_UNCACHED_UNBUFFERED;
+
+  // MC private DRAM
+  if (FixedPcdGetBool (PcdMcHighMemSupport)) {
+    VirtualMemoryTable[++Index].PhysicalBase = VirtualMemoryTable[1].PhysicalBase + VirtualMemoryTable[1].Length;
+    VirtualMemoryTable[Index].Length         = FixedPcdGet64 (PcdDpaa2McHighRamSize);
+  } else {
+    VirtualMemoryTable[++Index].PhysicalBase = VirtualMemoryTable[0].PhysicalBase + VirtualMemoryTable[0].Length;
+    VirtualMemoryTable[Index].Length         = FixedPcdGet64 (PcdDpaa2McLowRamSize);
+  }
+
+  VirtualMemoryTable[Index].VirtualBase    = VirtualMemoryTable[Index].PhysicalBase;
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+
+  // Map for PCIe. 6 PCI at equal space
+  for (I = 0; I < 6; I++) {
+    // PCIe1
+    VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdPciExp1BaseAddr) + I * FixedPcdGet64 (PcdPciExp1BaseSize);
+    VirtualMemoryTable[Index].VirtualBase  = VirtualMemoryTable[Index].PhysicalBase;
+    VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdPciExp1BaseSize);
+    VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+  }
+
+  // DPAA2 MC Portals region
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdDpaa2McPortalBaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdDpaa2McPortalBaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdDpaa2McPortalSize);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+
+  // DPAA2 NI Portals region
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdDpaa2NiPortalsBaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdDpaa2NiPortalsBaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdDpaa2NiPortalsSize);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+
+  // DPAA2 QBMAN Portals - cache enabled region
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdDpaa2QBmanPortalsBaseAddr);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdDpaa2QBmanPortalsBaseAddr);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdDpaa2QBmanPortalsCacheSize);
+  VirtualMemoryTable[Index].Attributes   = CacheAttributes;
+
+  // DPAA2 QBMAN Portals - cache inhibited region
+  VirtualMemoryTable[++Index].PhysicalBase = FixedPcdGet64 (PcdDpaa2QBmanPortalsBaseAddr) + FixedPcdGet64 (PcdDpaa2QBmanPortalsCacheSize);
+  VirtualMemoryTable[Index].VirtualBase  = FixedPcdGet64 (PcdDpaa2QBmanPortalsBaseAddr) + FixedPcdGet64 (PcdDpaa2QBmanPortalsCacheSize);
+  VirtualMemoryTable[Index].Length       = FixedPcdGet64 (PcdDpaa2QBmanPortalSize) - FixedPcdGet64 (PcdDpaa2QBmanPortalsCacheSize);
+  VirtualMemoryTable[Index].Attributes   = ARM_MEMORY_REGION_ATTRIBUTE_DEVICE;
+
+  // End of Table
+  VirtualMemoryTable[++Index].PhysicalBase = 0;
+  VirtualMemoryTable[Index].VirtualBase  = 0;
+  VirtualMemoryTable[Index].Length       = 0;
+  VirtualMemoryTable[Index].Attributes   = (ARM_MEMORY_REGION_ATTRIBUTES)0;
+
+  ASSERT ((Index + 1) <= MAX_VIRTUAL_MEMORY_MAP_DESCRIPTORS);
+
+  *VirtualMemoryMap = VirtualMemoryTable;
+}
diff --git a/Platform/NXP/LX2160aCex7Pkg/VarStore.fdf.inc b/Platform/NXP/LX2160aCex7Pkg/VarStore.fdf.inc
new file mode 100644
index 0000000..33aa5f6
--- /dev/null
+++ b/Platform/NXP/LX2160aCex7Pkg/VarStore.fdf.inc
@@ -0,0 +1,99 @@
+## @file
+#  FDF include file with FD definition that defines an empty variable store.
+#
+#  Copyright (c) 2006 - 2013, Intel Corporation. All rights reserved.
+#  Copyright (C) 2014, Red Hat, Inc.
+#  Copyright (c) 2016, Linaro, Ltd. All rights reserved.
+#  Copyright (c) 2016, Freescale Semiconductor. All rights reserved.
+#  Copyright 2017-2018 NXP.
+#
+#  This program and the accompanying materials are licensed and made available
+#  under the terms and conditions of the BSD License which accompanies this
+#  distribution. The full text of the license may be found at
+#  http://opensource.org/licenses/bsd-license.php
+#
+#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR
+#  IMPLIED.
+#
+##
+
+[FD.LX2160aCex7Nv_EFI]
+
+BaseAddress = 0x20500000|gNxpQoriqLsTokenSpaceGuid.PcdNvFdBase #The base address of the FLASH device
+Size = 0x000C0000|gNxpQoriqLsTokenSpaceGuid.PcdNvFdSize #The size in bytes of the FLASH device
+ErasePolarity = 1
+BlockSize = 0x1
+NumBlocks = 0xC0000
+
+#
+# Place NV Storage just above Platform Data Base
+#
+DEFINE NVRAM_AREA_VARIABLE_BASE                = 0x00000000
+DEFINE NVRAM_AREA_VARIABLE_SIZE                = 0x00040000
+DEFINE FTW_WORKING_BASE                        = $(NVRAM_AREA_VARIABLE_BASE) + $(NVRAM_AREA_VARIABLE_SIZE)
+DEFINE FTW_WORKING_SIZE                        = 0x00040000
+DEFINE FTW_SPARE_BASE                          = $(FTW_WORKING_BASE) + $(FTW_WORKING_SIZE)
+DEFINE FTW_SPARE_SIZE                          = 0x00040000
+
+#############################################################################
+# LX2160ACEX7 NVRAM Area
+# LX2160ACEX7 NVRAM Area contains: Variable + FTW Working + FTW Spare
+#############################################################################
+
+
+$(NVRAM_AREA_VARIABLE_BASE)|$(NVRAM_AREA_VARIABLE_SIZE)
+gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageVariableBase64|gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageVariableSize
+#NV_VARIABLE_STORE
+DATA = {
+  ## This is the EFI_FIRMWARE_VOLUME_HEADER
+  # ZeroVector []
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  # FileSystemGuid: gEfiSystemNvDataFvGuid         =
+  #   { 0xFFF12B8D, 0x7696, 0x4C8B,
+  #     { 0xA9, 0x85, 0x27, 0x47, 0x07, 0x5B, 0x4F, 0x50 }}
+  0x8D, 0x2B, 0xF1, 0xFF, 0x96, 0x76, 0x8B, 0x4C,
+  0xA9, 0x85, 0x27, 0x47, 0x07, 0x5B, 0x4F, 0x50,
+  # FvLength: 0xC0000
+  0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
+  # Signature "_FVH"       # Attributes
+  0x5f, 0x46, 0x56, 0x48, 0x36, 0x0E, 0x00, 0x00,
+  # HeaderLength # CheckSum # ExtHeaderOffset #Reserved #Revision
+  0x48, 0x00, 0xFC, 0xA9, 0x00, 0x00, 0x00, 0x02,
+  # Blockmap[0]: 0x4000 Blocks * 0x1000 Bytes / Block = SIZE_64MB
+  0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
+  # Blockmap[1]: End
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  ## This is the VARIABLE_STORE_HEADER
+  # It is compatible with SECURE_BOOT_ENABLE == FALSE as well.
+  # Signature: gEfiVariableGuid =
+  #   { 0xddcf3616, 0x3275, 0x4164,
+  #     { 0x98, 0xb6, 0xfe, 0x85, 0x70, 0x7f, 0xfe, 0x7d }}
+  0x16, 0x36, 0xcf, 0xdd, 0x75, 0x32, 0x64, 0x41,
+  0x98, 0xb6, 0xfe, 0x85, 0x70, 0x7f, 0xfe, 0x7d,
+  # Size: 0x40000 (gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageVariableSize) -
+  #         0x48 (size of EFI_FIRMWARE_VOLUME_HEADER) = 0x3ffb8
+  # This can speed up the Variable Dispatch a bit.
+  0xB8, 0xFF, 0x03, 0x00,
+  # FORMATTED: 0x5A #HEALTHY: 0xFE #Reserved: UINT16 #Reserved1: UINT32
+  0x5A, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
+}
+
+$(FTW_WORKING_BASE)|$(FTW_WORKING_SIZE)
+gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwWorkingBase64|gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwWorkingSize
+#NV_FTW_WORKING
+DATA = {
+  # EFI_FAULT_TOLERANT_WORKING_BLOCK_HEADER->Signature = gEdkiiWorkingBlockSignatureGuid         =
+  #  { 0x9e58292b, 0x7c68, 0x497d, { 0xa0, 0xce, 0x65,  0x0, 0xfd, 0x9f, 0x1b, 0x95 }}
+  0x2b, 0x29, 0x58, 0x9e, 0x68, 0x7c, 0x7d, 0x49,
+  0xa0, 0xce, 0x65,  0x0, 0xfd, 0x9f, 0x1b, 0x95,
+  # Crc:UINT32            #WorkingBlockValid:1, WorkingBlockInvalid:1, Reserved
+  0x5b, 0xe7, 0xc6, 0x86, 0xFE, 0xFF, 0xFF, 0xFF,
+  # WriteQueueSize: UINT64
+  0xE0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00
+}
+
+$(FTW_SPARE_BASE)|$(FTW_SPARE_SIZE)
+gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwSpareBase64|gEfiMdeModulePkgTokenSpaceGuid.PcdFlashNvStorageFtwSpareSize
+#NV_FTW_SPARE
-- 
2.17.1

